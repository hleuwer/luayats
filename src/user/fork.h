/*************************************************************************
*
*  YATS - Yet Another Tiny Simulator
*
**************************************************************************
*
*     Copyright (C) 1995-1997 Chair for Telecommunications
*    Dresden University of Technology
*    D-01062 Dresden
*    Germany
*
**************************************************************************
*
*   This program is free software; you can redistribute it and/or modify
*   it under the terms of the GNU General Public License as published by
*   the Free Software Foundation; either version 2 of the License, or
*   (at your option) any later version.
*
*   This program is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU General Public License for more details.
*
*   You should have received a copy of the GNU General Public License
*   along with this program; if not, write to the Free Software
*   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*
**************************************************************************
*
* Module author:  Matthias Baumann, TUD
* Creation:  Oct 2, 1997
*
* History: 
*
*************************************************************************/

/*
* Fork -- sends a copy of an incoming data object to each output. The
* original data object is forwarded to the first output.
* The data type should not matter, if the clone() method is defined
* properly. This is just to test the clone() methods.
*
* Fork fork: NOUT=3,
*   OUT=sink[1], sink[2], sink[3];
* or (equivalent, if names follow a regular structure):
* Fork fork: NOUT=3,
*   OUT=(i: sink[i]);
*   // NOUT: # of outputs
*   // in case of a given counter variable (it has to be defined in advance),
*   // output names are generated by the template given
*/
#ifndef FORK_INCL
#define FORK_INCL

#include "inxout.h"

//tolua_begin
class dfork: public inxout {
  typedef inxout baseclass;

public:
  dfork(void);
  ~dfork(void);

  int  noutp;
//tolua_end

  rec_typ REC(data *, int); 

}; //tolua_export
#endif



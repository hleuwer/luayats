%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 11 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Courier FMFONTDEFINE
3 0 /Courier-Bold FMFONTDEFINE
4 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "i" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(i) 522.2 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 24 Q
(Y) 141.65 755.03 T
(A) 156.1 755.03 T
(TS \320 Y) 170.76 755.03 T
(et Another T) 237.7 755.03 T
(in) 359.5 755.03 T
(y Simulator) 377.81 755.03 T
(Programmer\325) 133.77 725.03 T
(s Manual for V) 260.42 725.03 T
(ersion 0.3) 403.72 725.03 T
1 12 Q
(Matthias Baumann) 266.57 673.03 T
0 F
(Dresden Uni) 233.25 657.03 T
(v) 293.93 657.03 T
(ersity of T) 299.75 657.03 T
(echnology) 348.9 657.03 T
(Communications Laboratory) 246.91 641.03 T
(1.0) 107.73 593.03 T
(Basic Principles) 144.58 593.03 T
(.............................................................................................) 225.01 593.03 T
(1) 504.25 593.03 T
0 10 Q
(1.1) 144.58 578.36 T
(Creation of Netw) 178.59 578.36 T
(ork Objects) 247.92 578.36 T
(....................................................................................) 295.01 578.36 T
(1) 505.25 578.36 T
(1.2) 144.58 564.36 T
(Connection of Netw) 178.59 564.36 T
(ork Objects) 259.59 564.36 T
(...............................................................................) 307.51 564.36 T
(1) 505.25 564.36 T
(1.3) 144.58 550.36 T
(Communication between Netw) 178.59 550.36 T
(ork Objects) 302.92 550.36 T
(..............................................................) 350.01 550.36 T
(1) 505.25 550.36 T
(1.3.1) 178.59 538.36 T
(Data T) 215.44 538.36 T
(ransfer) 242.58 538.36 T
(.............................................................................................) 272.51 538.36 T
(1) 505.25 538.36 T
(1.3.2) 178.59 526.36 T
(Export of V) 215.44 526.36 T
(ariables for Reading) 262.1 526.36 T
(................................................................) 345.01 526.36 T
(2) 505.25 526.36 T
(1.3.3) 178.59 514.36 T
(\322Special\323 Communication) 215.44 514.36 T
(.........................................................................) 322.51 514.36 T
(2) 505.25 514.36 T
(1.4) 144.58 500.36 T
(Ev) 178.59 500.36 T
(ent Scheduler) 189.55 500.36 T
(........................................................................................................) 245.01 500.36 T
(2) 505.25 500.36 T
0 12 Q
(2.0) 107.73 481.03 T
(A Netw) 144.58 481.03 T
(ork Object Class: Commented C++ Code) 182.11 481.03 T
(.........................................) 381.01 481.03 T
(3) 504.25 481.03 T
(3.0) 107.73 461.03 T
(Ho) 144.58 461.03 T
(w to Add a Ne) 158.94 461.03 T
(w Netw) 228.62 461.03 T
(ork Object Class) 266.16 461.03 T
(....................................................) 348.01 461.03 T
(7) 504.25 461.03 T
0 10 Q
(3.1) 144.58 446.36 T
(Con\336guration by Hand) 178.59 446.36 T
(.............................................................................................) 272.51 446.36 T
(7) 505.25 446.36 T
(3.2) 144.58 432.36 T
(Automatic Con\336guration) 178.59 432.36 T
(..........................................................................................) 280.01 432.36 T
(7) 505.25 432.36 T
0 12 Q
(4.0) 107.73 413.03 T
(Frequent Errors and Deb) 144.58 413.03 T
(ugging) 263.3 413.03 T
(.....................................................................) 297.01 413.03 T
(8) 504.25 413.03 T
0 10 Q
(4.1) 144.58 398.36 T
(Usage of the Rec\050\051 Method) 178.59 398.36 T
(.......................................................................................) 287.51 398.36 T
(8) 505.25 398.36 T
(4.2) 144.58 384.36 T
(Ev) 178.59 384.36 T
(ent Handling) 189.55 384.36 T
(.........................................................................................................) 242.51 384.36 T
(8) 505.25 384.36 T
(4.3) 144.58 370.36 T
(Locating Erroneous Netw) 178.59 370.36 T
(ork Objects) 281.8 370.36 T
(......................................................................) 330.01 370.36 T
(9) 505.25 370.36 T
0 12 Q
(5.0) 107.73 351.03 T
(Netw) 144.58 351.03 T
(ork Object Classes and Their Methods) 170.45 351.03 T
(.................................................) 357.01 351.03 T
(9) 504.25 351.03 T
0 10 Q
(5.1) 144.58 336.36 T
(Object Creation) 178.59 336.36 T
(.........................................................................................................) 242.51 336.36 T
(9) 505.25 336.36 T
(5.2) 144.58 322.36 T
(Connection Establishment) 178.59 322.36 T
(......................................................................................) 285.01 322.36 T
(10) 500.25 322.36 T
(5.3) 144.58 308.36 T
(Recei) 178.59 308.36 T
(ving Data) 201.11 308.36 T
(.......................................................................................................) 242.51 308.36 T
(11) 500.25 308.36 T
(5.4) 144.58 294.36 T
(Acti) 178.59 294.36 T
(v) 195.56 294.36 T
(ation by the Ev) 200.31 294.36 T
(ent Scheduler) 260.99 294.36 T
(.........................................................................) 317.51 294.36 T
(11) 500.25 294.36 T
(5.5) 144.58 280.36 T
(Processing Commands) 178.59 280.36 T
(............................................................................................) 270.01 280.36 T
(11) 500.25 280.36 T
(5.6) 144.58 266.36 T
(Exporting V) 178.59 266.36 T
(ariable Addresses) 227.2 266.36 T
(................................................................................) 300.01 266.36 T
(12) 500.25 266.36 T
(5.7) 144.58 252.36 T
(Miscellaneous) 178.59 252.36 T
(.........................................................................................................) 237.51 252.36 T
(13) 500.25 252.36 T
0 12 Q
(6.0) 107.73 233.03 T
(Data Object Classes, Start-Stop Protocol) 144.58 233.03 T
(....................................................) 342.01 233.03 T
(13) 498.25 233.03 T
0 10 Q
(6.1) 144.58 218.36 T
(De\336nition of Data Object Classes) 178.59 218.36 T
(..........................................................................) 315.01 218.36 T
(13) 500.25 218.36 T
(6.2) 144.58 204.36 T
(Run-T) 178.59 204.36 T
(ime Data T) 204.35 204.36 T
(ype Checking) 248.54 204.36 T
(..............................................................................) 305.01 204.36 T
(14) 500.25 204.36 T
(6.3) 144.58 190.36 T
(Embedding of Data Objects) 178.59 190.36 T
(....................................................................................) 290.01 190.36 T
(14) 500.25 190.36 T
(6.4) 144.58 176.36 T
(Start-Stop Protocol) 178.59 176.36 T
(.................................................................................................) 257.51 176.36 T
(15) 500.25 176.36 T
0 12 Q
(7.0) 107.73 157.03 T
(Generic Netw) 144.58 157.03 T
(ork Object Classes) 211.43 157.03 T
(.................................................................) 303.01 157.03 T
(16) 498.25 157.03 T
0 10 Q
(7.1) 144.58 142.36 T
(De\336nition of Inputs) 178.59 142.36 T
(.................................................................................................) 257.51 142.36 T
(17) 500.25 142.36 T
(7.2) 144.58 128.36 T
(De\336nition of Outputs) 178.59 128.36 T
(..............................................................................................) 265.01 128.36 T
(17) 500.25 128.36 T
(7.3) 144.58 114.36 T
(Command\050\051 Method, Ev) 178.59 114.36 T
(ent Structure) 276.49 114.36 T
(....................................................................) 330.01 114.36 T
(18) 500.25 114.36 T
(7.4) 144.58 100.36 T
(Export\050\051 Method, Con) 178.59 100.36 T
(v) 267.35 100.36 T
(enience Functions) 272.2 100.36 T
(..............................................................) 345.01 100.36 T
(18) 500.25 100.36 T
(7.5) 144.58 86.36 T
(Run-T) 178.59 86.36 T
(ime Data T) 204.35 86.36 T
(ype Checking) 248.54 86.36 T
(..............................................................................) 305.01 86.36 T
(19) 500.25 86.36 T
(7.6) 144.58 72.36 T
(Connection Establishment) 178.59 72.36 T
(......................................................................................) 285.01 72.36 T
(19) 500.25 72.36 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "i" 1
%%Page: "ii" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(ii) 519.97 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(8.0) 107.73 763.03 T
(Ev) 144.58 763.03 T
(ent Scheduler) 157.73 763.03 T
(...........................................................................................) 225.01 763.03 T
(20) 498.25 763.03 T
0 10 Q
(8.1) 144.58 748.36 T
(Ev) 178.59 748.36 T
(ent T) 189.55 748.36 T
(riggered Acti) 210.03 748.36 T
(v) 262.82 748.36 T
(ation) 267.57 748.36 T
(....................................................................................) 290.01 748.36 T
(21) 500.25 748.36 T
(8.2) 144.58 734.36 T
(T) 178.59 734.36 T
(ime T) 184.35 734.36 T
(riggered Acti) 207.61 734.36 T
(v) 260.4 734.36 T
(ation) 265.15 734.36 T
(.....................................................................................) 287.51 734.36 T
(21) 500.25 734.36 T
(8.3) 144.58 720.36 T
(Deleting Ev) 178.59 720.36 T
(ent T) 226.49 720.36 T
(riggered Acti) 246.97 720.36 T
(v) 299.76 720.36 T
(ations) 304.51 720.36 T
(....................................................................) 330.01 720.36 T
(21) 500.25 720.36 T
0 12 Q
(9.0) 107.73 701.03 T
(P) 144.58 701.03 T
(arser Utility Routines) 151.07 701.03 T
(.................................................................................) 255.01 701.03 T
(21) 498.25 701.03 T
(10.0) 107.73 681.03 T
(Symbol Manager) 144.58 681.03 T
(..........................................................................................) 228.01 681.03 T
(22) 498.25 681.03 T
(11.0) 107.73 661.03 T
(Queues) 144.58 661.03 T
(.........................................................................................................) 183.01 661.03 T
(22) 498.25 661.03 T
0 10 Q
(11.1) 144.58 646.36 T
(Initialisation) 178.59 646.36 T
(............................................................................................................) 230.01 646.36 T
(23) 500.25 646.36 T
(11.2) 144.58 632.36 T
(Enqueueing) 178.59 632.36 T
(.............................................................................................................) 227.51 632.36 T
(23) 500.25 632.36 T
(11.3) 144.58 618.36 T
(Dequeueing) 178.59 618.36 T
(.............................................................................................................) 227.51 618.36 T
(24) 500.25 618.36 T
(11.4) 144.58 604.36 T
(Information) 178.59 604.36 T
(.............................................................................................................) 227.51 604.36 T
(24) 500.25 604.36 T
(11.5) 144.58 590.36 T
(W) 178.59 590.36 T
(alk through a Queue) 187.23 590.36 T
(............................................................................................) 270.01 590.36 T
(24) 500.25 590.36 T
0 12 Q
(12.0) 107.73 571.03 T
(Random Numbers) 144.58 571.03 T
(........................................................................................) 234.01 571.03 T
(25) 498.25 571.03 T
(13.0) 107.73 551.03 T
(Error Messages) 144.58 551.03 T
(............................................................................................) 222.01 551.03 T
(25) 498.25 551.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "ii" 2
%%Page: "1" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(1) 520.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(1.0  Basic Principles) 107.73 760.36 T
1 14 Q
(1.1  Cr) 107.73 725.7 T
(eation of Netw) 148.3 725.7 T
(ork Objects) 234.47 725.7 T
0 12 Q
(The input \336le is analyzed by the parser front end. When it recognizes a statement) 107.73 699.03 T
-0.08 (be) 107.73 685.03 P
-0.08 (ginning with a netw) 118.88 685.03 P
-0.08 (ork object class identi\336er) 214.19 685.03 P
-0.08 (, then it creates an object of the desired) 334.47 685.03 P
(class. This is done by calling an intermediate routine pro) 107.73 671.03 T
(vided by the class \050see) 379.52 671.03 T
-0.34 (Section) 107.73 657.03 P
-0.34 (5.1 on page) 146.73 657.03 P
-0.34 (9\051. The object constructor normally is empty) 204.69 657.03 P
-0.34 (. Upon object creation) 416.15 657.03 P
(the parser calls its init\050\051-method. Here, the de\336nition statement can be analyzed with) 107.73 643.03 T
(the parser utility routines \050see Section) 107.73 629.03 T
(9.0 on page) 292.37 629.03 T
(21\051. Inputs can be declared by call-) 351.03 629.03 T
(ing the input\050\051-methods of the generic class ino \050see Section) 107.73 615.03 T
(7.1 on page) 399.02 615.03 T
(17\051. Output) 457.67 615.03 T
(names can be parsed and re) 107.73 601.03 T
(gistered by using the output\050\051-methods pro) 239.16 601.03 T
(vided by the) 443.97 601.03 T
-0.15 (classes in1out and inxout \050see Section) 107.73 587.03 P
-0.15 (7.2 on page) 292.31 587.03 P
-0.15 (17\051. When init\050\051 returns control, the) 350.67 587.03 P
-0.07 (parser re) 107.73 573.03 P
-0.07 (gisters the object at the symbol manager) 149.12 573.03 P
-0.07 (, and e) 341.52 573.03 P
-0.07 (xpects the \336nal \324;\325 of the de\336ni-) 372.86 573.03 P
(tion statement.) 107.73 559.03 T
1 14 Q
(1.2  Connection of Netw) 107.73 525.7 T
(ork Objects) 250.29 525.7 T
0 12 Q
(After creation, the objects e) 107.73 499.03 T
(xist without an) 240.51 499.03 T
(y connections to each others, the) 311.67 499.03 T
(y are only) 468.12 499.03 T
(re) 107.73 485.03 T
(gistered at the symbol manager) 116.87 485.03 T
(. Before running the \336rst simulation \050\336rst statement) 266.19 485.03 T
(Sim->Run\051, the connection process is in) 107.73 471.03 T
(v) 300 471.03 T
(ok) 305.76 471.03 T
(ed by the k) 317.64 471.03 T
(ernel. All objects re) 370.52 471.03 T
(gistered are) 464.98 471.03 T
-0.13 (informed via the connect\050\051-method \050see Section) 107.73 457.03 P
-0.13 (5.2 on page) 339.01 457.03 P
-0.13 (10\051. The follo) 397.39 457.03 P
-0.13 (wing then is) 463.15 457.03 P
-0.01 (normally done by the generic base classes in1out and inxout, so you ne) 107.73 443.03 P
-0.01 (v) 448.31 443.03 P
-0.01 (er need to pro-) 454.13 443.03 P
(gramm it when using one of them: The object looks for the succeeding object\050s\051) 107.73 429.03 T
(obtained by the output\050\051-calls during init\050\051. It calls the symbol manager to get the) 107.73 415.03 T
(object address and then asks the object itself to obtain the input number associated to) 107.73 401.03 T
(the gi) 107.73 387.03 T
(v) 134.43 387.03 T
(en input name \050handle\050\051-method, see Section) 140.25 387.03 T
(5.2 on page) 358.54 387.03 T
(10\051. This input k) 417.2 387.03 T
(e) 497.08 387.03 T
(y) 502.23 387.03 T
(number lateron accompanies e) 107.73 373.03 T
(v) 253.72 373.03 T
(ery data object passed to the successor via the rec\050\051-) 259.54 373.03 T
(method \050see Section) 107.73 359.03 T
(5.3 on page) 208.05 359.03 T
(11\051. F) 266.7 359.03 T
(or the object data structure members \336lled dur-) 295.19 359.03 T
(ing the connection process, see Section) 107.73 345.03 T
(7.6 on page) 298.7 345.03 T
(19.) 357.35 345.03 T
1 14 Q
(1.3  Communication between Netw) 107.73 311.7 T
(ork Objects) 315.61 311.7 T
1 12 Q
(1.3.1  Data T) 107.73 279.03 T
(ransfer) 172.5 279.03 T
0 F
(The standard w) 107.73 253.03 T
(ay for data transfer is calling the rec\050\051-method \050see Section) 181.59 253.03 T
(5.3 on) 466.84 253.03 T
(page) 107.73 239.03 T
(11\051 of the ne) 133.38 239.03 T
(xt object:) 194.19 239.03 T
2 F
(retval = SucObjectPtr->rec\050DataObjPtr, InputKey\051;) 136.07 219.03 T
0 F
(The method returns an information, whether the sending object no) 107.73 193.03 T
(w should stop to) 425.38 193.03 T
(send. This allo) 107.73 179.03 T
(ws the recei) 177.76 179.03 T
(v) 234.77 179.03 T
(er to control the sender \050see Start-Stop protocol,) 240.59 179.03 T
(Section) 107.73 165.03 T
(6.4 on page) 146.73 165.03 T
(15\051. In the most \322pure\323 A) 205.38 165.03 T
(TM object classes, ho) 326.69 165.03 T
(we) 431.04 165.03 T
(v) 444.73 165.03 T
(er) 450.55 165.03 T
(, this kind of) 459.4 165.03 T
(backpressure is not implemented since not according to reality) 107.73 151.03 T
(.) 406.9 151.03 T
(Please note tw) 107.73 125.03 T
(o v) 176.93 125.03 T
(ery important con) 191.75 125.03 T
(v) 276.59 125.03 T
(entions \050see Section) 282.41 125.03 T
(5.3 on page) 381.4 125.03 T
(11\051:) 440.05 125.03 T
3 F
(\245) 107.73 105.03 T
0 F
(Rec\050\051 can only be used during the early phase of a time slot. Y) 121.9 105.03 T
(ou do not kno) 420.52 105.03 T
(w your) 486.56 105.03 T
(succeeding object, and most more comple) 121.9 91.03 T
(x netw) 323.02 91.03 T
(ork objects rely on recei) 355.23 91.03 T
(ving only) 470.9 91.03 T
(in the early phase.) 121.9 77.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 3
%%Page: "2" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(2) 520.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(\245) 107.73 763.03 T
0 F
(Per time slot, you must not send more than one data item. Classes lik) 121.9 763.03 T
(e delay lines) 452.78 763.03 T
(and multiple) 121.9 749.03 T
(x) 182.06 749.03 T
(ers simply cause a core dump when violating this rule.) 187.88 749.03 T
(The type of data transfered by rec\050\051 is unspeci\336ed, it only must be deri) 107.73 723.03 T
(v) 445.36 723.03 T
(ed from the) 451.18 723.03 T
(basic data object class \322data\323. The recei) 107.73 709.03 T
(ving object has to v) 298.36 709.03 T
(erify the data type when) 392.17 709.03 T
(relying on a speci\336c one. Please use the typecheck\050\051-methods \050see Section) 107.73 695.03 T
(7.5 on) 466.98 695.03 T
-0.04 (page) 107.73 681.03 P
-0.04 (19\051 for this purpose. The) 133.38 681.03 P
-0.04 (y do not perform an absolute check, b) 252.02 681.03 P
-0.04 (ut the) 432.78 681.03 P
-0.04 (y also accept) 459.56 681.03 P
-0.22 (that the actual data type is deri) 107.73 667.03 P
-0.22 (v) 252.76 667.03 P
-0.22 (ed from the desired one. Since the) 258.58 667.03 P
-0.22 (y use an inte) 420.72 667.03 P
-0.22 (ger table) 480.2 667.03 P
(lookup, the) 107.73 653.03 T
(y are v) 161.55 653.03 T
(ery f) 194.02 653.03 T
(ast.) 216.22 653.03 T
1 F
(1.3.2  Export of V) 107.73 621.03 T
(ariables f) 197.28 621.03 T
(or Reading) 244.65 621.03 T
0 F
(Objects can e) 107.73 595.03 T
(xport addresses of their internal v) 172.19 595.03 T
(ariables to other objects lik) 332.86 595.03 T
(e measure-) 462.72 595.03 T
(ment de) 107.73 581.03 T
(vices or to the simulation k) 145.76 581.03 T
(ernel. Measurement de) 275.97 581.03 T
(vices simply ask for the) 385.3 581.03 T
-0.4 (address of a v) 107.73 567.03 P
-0.4 (ariable to display) 172.55 567.03 P
-0.4 (, and perform scanning and display on their o) 253.63 567.03 P
-0.4 (wn. F) 467.79 567.03 P
-0.4 (or the) 494.55 567.03 P
(simulation k) 107.73 553.03 T
(ernel \050or more e) 167.28 553.03 T
(xactly the parser\051, e) 244.07 553.03 T
(xported v) 338.52 553.03 T
(ariables automatically are) 383.88 553.03 T
(a) 107.73 539.03 T
(v) 112.82 539.03 T
(ailable to read them in the input \336le, i.e. the) 118.51 539.03 T
(y can be used as commands in  e) 327.65 539.03 T
(xpres-) 484.11 539.03 T
(sions. Although the parameter structure of the e) 107.73 525.03 T
(xport\050\051-method itself is rather compli-) 336.17 525.03 T
(cated \050see Section) 107.73 511.03 T
(5.6 on page) 197.37 511.03 T
(12\051,  con) 256.02 511.03 T
(vinience methods pro) 297.87 511.03 T
(vided by the class ino) 401.01 511.03 T
(allo) 107.73 497.03 T
(w to e) 125.43 497.03 T
(xport scalars and one-dimensional arryas \050both inte) 154.57 497.03 T
(ger or double\051 by writing) 400.35 497.03 T
(one line of source code \050see Section) 107.73 483.03 T
(7.4 on page) 283.35 483.03 T
(18\051.) 342 483.03 T
1 F
(1.3.3  \322Special\323 Communication) 107.73 451.03 T
0 F
(F) 107.73 425.03 T
(or all cases, where possibilities or restrictions of the \336rst tw) 114.22 425.03 T
(o methods prohibit their) 399.73 425.03 T
(application, you can use the uni) 107.73 411.03 T
(v) 259.41 411.03 T
(ersal method special\050\051 \050see Section) 265.23 411.03 T
(5.7 on page) 435.52 411.03 T
(13\051.) 494.17 411.03 T
-0.02 (This method can be used for arbitrary data types \050upon propper de\336nition\051 and bidirec-) 107.73 397.03 P
(tional data transfer) 107.73 383.03 T
(. Currently it is used e.g. for r) 197.04 383.03 T
(.n. transformation table e) 338.37 383.03 T
(xport to) 458.5 383.03 T
(source objects \050see class Distrib) 107.73 369.03 T
(ution\051, establishment of ABR connections \050see ABR) 260.79 369.03 T
(classes\051, and for writing the routing table of a demultiple) 107.73 355.03 T
(x) 380.17 355.03 T
(er) 385.99 355.03 T
(.) 394.66 355.03 T
1 14 Q
(1.4  Ev) 107.73 321.7 T
(ent Scheduler) 148.43 321.7 T
0 12 Q
-0.37 (In principle, the e) 107.73 295.03 P
-0.37 (v) 190.97 295.03 P
-0.37 (ent scheduler only is designed to manage time-dependent operations) 196.79 295.03 P
(within the same object. It is e.g. not possible to use the scheduler directly for delayed) 107.73 281.03 T
(deli) 107.73 267.03 T
(v) 125.43 267.03 T
(ery of a data item to another object. In such cases, it is al) 131.25 267.03 T
(w) 403.41 267.03 T
(ays necessary that the) 411.95 267.03 T
-0.13 (sending object sets a timer with the wished delay) 107.73 253.03 P
-0.13 (, and sends the data item itself by call-) 341.18 253.03 P
(ing the rec\050\051-method of the successor) 107.73 239.03 T
(. This may appear as incon) 285.35 239.03 T
(vinient, b) 413.51 239.03 T
(ut in practice) 458.61 239.03 T
(only v) 107.73 225.03 T
(ery vie) 137.88 225.03 T
(w object classes ha) 170.57 225.03 T
(v) 261.98 225.03 T
(e to use this technique, or it is something to do an) 267.8 225.03 T
(y-) 505.61 225.03 T
(w) 107.73 211.03 T
(ay at the instance of sending.) 116.27 211.03 T
(T) 107.73 197.03 T
(o solv) 114.1 197.03 T
(e problems caused by the unde\336ned processing order of simultaneous e) 142.92 197.03 T
(v) 484.56 197.03 T
(ents,) 490.38 197.03 T
(time slots are di) 107.73 183.03 T
(vided in an early and a late phase. Since data are only sent during the) 183.76 183.03 T
-0.23 (early phase, it is possible to implement e.g. the round-robin strate) 107.73 169.03 P
-0.23 (gy in a multiple) 419.58 169.03 P
-0.23 (x) 494.39 169.03 P
-0.23 (er in) 500.21 169.03 P
(the late phase.) 107.73 155.03 T
(The scheduler pro) 107.73 141.03 T
(vides routines for single acti) 194.19 141.03 T
(v) 329.87 141.03 T
(ation upon e) 335.57 141.03 T
(xpiry of a speci\336ed time,) 394.72 141.03 T
-0.07 (and for acti) 107.73 127.03 P
-0.07 (v) 161.93 127.03 P
-0.07 (ation during each time slot. The former kind of re) 167.63 127.03 P
-0.07 (gistration can be deleted) 404.74 127.03 P
(as long as the e) 107.73 113.03 T
(v) 180.75 113.03 T
(ent has not yet been acti) 186.57 113.03 T
(v) 301.91 113.03 T
(ated.) 307.61 113.03 T
(F) 107.73 99.03 T
(or detailed information ho) 114.22 99.03 T
(w to start and stop timers, see Section) 239.57 99.03 T
(8.0 on page) 423.89 99.03 T
(20.) 482.55 99.03 T
-0.38 (Please pay also attention to the problems which may arise with the e) 107.73 85.03 P
-0.38 (v) 430.78 85.03 P
-0.38 (ent scheduler \050see) 436.6 85.03 P
(Section) 107.73 71.03 T
(3.2 on page) 146.73 71.03 T
(7\051.) 205.38 71.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 4
%%Page: "3" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(3) 520.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 16 Q
(2.0  A Netw) 107.73 760.36 T
(ork Object Class: Commented C++ Code) 186.65 760.36 T
0 12 Q
-0.34 (The follo) 107.73 733.03 P
-0.34 (wing e) 151.42 733.03 P
-0.34 (xample can be found as source code in the \336le src/user/vciCount.c. The) 183.23 733.03 P
(e) 107.73 719.03 T
(xample de\336nes a netw) 112.88 719.03 T
(ork object class which only forw) 219.74 719.03 T
(ards cells on a gi) 376.59 719.03 T
(v) 456.94 719.03 T
(en virtual) 462.76 719.03 T
(channel. All other cells are terminated, i.e. the object acts as sink. Additionally) 107.73 705.03 T
(, a) 485.22 705.03 T
(\322clock\323 is implemented \050only in order to demonstrate scheduler usage\051. In the simula-) 107.73 691.03 T
(tor input \336le, an object is declared e.g. with) 107.73 677.03 T
2 F
(  VCICount xyz: VCI=13, TICK=10, OUT=sink;) 107.73 651.03 T
0 F
(The Object then counts cells on VCI 13, and forw) 107.73 625.03 T
(ards these cells to sink. The input) 346.9 625.03 T
(name of the object is \324xyz\325, too. So we can ha) 107.73 611.03 T
(v) 326.77 611.03 T
(e e.g. a source) 332.6 611.03 T
2 F
(CBRquelle src: ... OUT=xyz) 107.73 597.03 T
0 F
(. The counter for passed cells can be read with) 294.93 597.03 T
2 F
(x = xyz->TheCounter) 107.73 583.03 T
0 F
(. The clock is incremented with each TICK-th simulation) 243.87 583.03 T
(time step, and the clock v) 107.73 569.03 T
(alue can be read with) 230.08 569.03 T
2 F
(x = xyz->Clock) 335.04 569.03 T
0 F
(.) 435.84 569.03 T
-0.44 (W) 107.73 543.03 P
-0.44 (e start our description of the C++ code \336le with the class de\336nition. The ne) 118.1 543.03 P
-0.44 (w netw) 471.44 543.03 P
-0.44 (ork) 505.86 543.03 P
(object class is deri) 107.73 529.03 T
(v) 195.75 529.03 T
(ed from the generic base class \324in1out\325 which is described in more) 201.57 529.03 T
(detail in Section) 107.73 515.03 T
(7.0 on page) 188.73 515.03 T
(16. The most important services of this base class are the) 247.38 515.03 T
(de\336nition of inputs and outputs, and the complete handling of the connection process.) 107.73 501.03 T
2 10 Q
(#include \322in1out.h\323  // declaration of class in1out,) 127.57 478.36 T
(                     // also includes all other system headers) 127.57 466.36 T
(class vciCnt: public in1out {) 127.57 454.36 T
(typedef in1out baseclass; // often useful for recursion through) 127.57 442.36 T
(                          // the class hierarchy) 127.57 430.36 T
(public:) 127.57 418.36 T
(    vciCnt\050\051: clockEvent\050this, 0\051 {} // constructor) 127.57 406.36 T
0 12 Q
(Ev) 107.73 381.03 T
(ents) 120.88 381.03 T
0 8 Q
(\320) 143.21 381.03 T
0 12 Q
( clockEv) 147.21 381.03 T
(ent is de\336ned further belo) 189.35 381.03 T
(w) 312.37 381.03 T
0 8 Q
(\320) 324.03 381.03 T
0 12 Q
( need to be initialized by the constructor) 328.03 381.03 T
(for safety reasons. The \336rst ar) 107.73 367.03 T
(gument is the pointer to our object, the second is a k) 250.8 367.03 T
(e) 501.33 367.03 T
(y) 506.47 367.03 T
(v) 107.73 353.03 T
(alue allo) 113.43 353.03 T
(wing to distinguish between dif) 154.12 353.03 T
(ferent e) 305.15 353.03 T
(v) 341.16 353.03 T
(ents. Actually) 346.98 353.03 T
(, we do not need this:) 412.86 353.03 T
(we only ha) 107.73 339.03 T
(v) 160.14 339.03 T
(e one e) 165.96 339.03 T
(v) 199.65 339.03 T
(ent. Instead of de\336ning clockEv) 205.47 339.03 T
(ent, we also could ha) 358.26 339.03 T
(v) 459 339.03 T
(e reused an) 464.82 339.03 T
(e) 107.73 325.03 T
(v) 112.75 325.03 T
(ent structure which already is pro) 118.57 325.03 T
(vided and initialized by the base class \050its name is) 278.69 325.03 T
(std_e) 107.73 311.03 T
(vt, see Section) 132.76 311.03 T
(7.3 on page) 205.42 311.03 T
(18\051.) 264.08 311.03 T
2 10 Q
(    void init\050\051;         // evaluates the definition statement) 127.57 288.36 T
(    rec_typ REC\050data *, int\051; // receives and forwards data.) 127.57 276.36 T
(               // REC is a macro normally expanding to \324rec\325.) 127.57 264.36 T
(               // REC is overloaded in debugging mode.) 127.57 252.36 T
(    void early\050event *\051;      // is called by the scheduler) 127.57 240.36 T
(    int export\050exp_typ *\051;    // allows read access to myCounter) 127.57 228.36 T
(    event clockEvent;   // an event structure for our clock tick) 127.57 204.36 T
(    int   myVCI;        // the VCI on which to count cells) 127.57 192.36 T
(    unsigned myCounter; // the counter itself) 127.57 180.36 T
(    tim_typ clockTick;  // tick, tim_typ is the type for times) 127.57 168.36 T
(    unsigned myClock;   // is incremented with each tick) 127.57 156.36 T
(};  // end of class definition) 127.57 144.36 T
0 12 Q
(While the class de\336nition normally should be placed in a header \336le, the rest has to) 107.73 119.03 T
-0.19 (reside in the normal C++ code \336le. T) 107.73 105.03 P
-0.19 (w) 282.92 105.03 P
-0.19 (o macro calls establish the connection to the k) 291.47 105.03 P
-0.19 (er-) 511.1 105.03 P
(nel:) 107.73 91.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 5
%%Page: "4" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(4) 520.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(CONSTRUCTOR\050VciCnt, vciCnt\051;) 127.57 764.36 T
(USERCLASS\050\322VCICount\323, VciCnt\051;) 127.57 752.36 T
0 12 Q
(CONSTR) 107.73 727.03 T
(UCT) 154.59 727.03 T
(OR is a macro wich generates an interf) 178.37 727.03 T
(ace routine \050\336rst ar) 365.2 727.03 T
(gument, here) 455.95 727.03 T
(VciCnt\050\051\051 to be called by the parser when it w) 107.73 713.03 T
(ants to create a ne) 327.89 713.03 T
(w object. The routine) 413.56 713.03 T
(creates an object of class vciCnt \050second ar) 107.73 699.03 T
(gument\051 and returns the pointer to the) 314.45 699.03 T
(parser) 107.73 685.03 T
(.) 136.38 685.03 T
(The line containing  USERCLASS\050...\051 is copied by mak) 107.73 671.03 T
(e con\336g \050see Section) 376.6 671.03 T
(3.2 on) 479.25 671.03 T
(page) 107.73 657.03 T
(7\051 into the source code \336le \322src/k) 133.38 657.03 T
(ernel/class.c\323. It declares the interf) 292.56 657.03 T
(ace routine) 459.05 657.03 T
(VciCnt\050\051 in the k) 107.73 643.03 T
(ernel, and says it has to be called, if a statement be) 189.27 643.03 T
(gins with \322VCI-) 432.04 643.03 T
(Count\323. During compilation of our C++ \336le, USERCLASS is an empty macro. Hence) 107.73 629.03 T
(it does not generate code here.) 107.73 615.03 T
(If the parser no) 107.73 601.03 T
(w detects a statement be) 180.4 601.03 T
(ginning with \322VCICount\323, then it calls the) 296.86 601.03 T
(interf) 107.73 587.03 T
(ace routine VciCnt\050\051. Immediately afterw) 133.6 587.03 T
(ards it calls the method init\050\051 of the) 332.43 587.03 T
(returned ne) 107.73 573.03 T
(w object. At this instant, the input reading pointer still points to the be) 161.74 573.03 T
(gin-) 497.89 573.03 T
(ning of the statement, i.e. to the class identi\336er) 107.73 559.03 T
(.) 331.38 559.03 T
2 10 Q
(void vciCnt::init\050\051) 127.57 536.36 T
({) 127.57 524.36 T
(    skip\050CLASS\051;           // we skip the class ID) 127.57 512.36 T
(    name = read_id\050NULL\051;// NULL: no keyword in front expected) 127.57 500.36 T
0 12 Q
-0.17 (Name is a member of the root class named \324) 107.73 475.03 P
2 F
-0.4 (root) 317.84 475.03 P
0 F
-0.17 (\325. If we do not set \324name\325 then it con-) 346.64 475.03 P
(tinues to point to \322<name: unkno) 107.73 461.03 T
(wn>\323 \050initialized by the constructor of the base class) 265.86 461.03 T
2 F
(root) 107.73 447.03 T
0 F
(\051. Read_id\050\051 is a parser utility routine. It reads an identi\336er and checks that this) 136.53 447.03 T
(ID is not yet used.) 107.73 433.03 T
2 10 Q
(    skip\050\324:\325\051;               // we require a \324:\325 to follow) 127.57 410.36 T
(    myVCI = read_int\050\322VCI\323\051; // read the VCI) 127.57 398.36 T
(    skip\050\324,\325\051;             // require a \324,\325) 127.57 386.36 T
0 12 Q
(W) 107.73 361.03 T
(e initialize myVCI by calling read_int\050\051 which ag) 118.1 361.03 T
(ain is a parser utility routine. It) 355 361.03 T
(e) 107.73 347.03 T
(xpects the gi) 112.88 347.03 T
(v) 173.24 347.03 T
(en k) 179.05 347.03 T
(e) 199.26 347.03 T
(y w) 204.41 347.03 T
(ord \322VCI\323, follo) 221.96 347.03 T
(wed by a \324=\325, and an arbitrary e) 300.64 347.03 T
(xpression e) 451.84 347.03 T
(v) 505.86 347.03 T
(al-) 511.56 347.03 T
(uating to an inte) 107.73 333.03 T
(ger v) 185.21 333.03 T
(alue. The v) 209.24 333.03 T
(alue is returned. If something goes wrong, the error) 262.59 333.03 T
-0.36 (message is automatically generated by the parser) 107.73 319.03 P
-0.36 (, and read_int\050\051 does not return \050Y) 339.72 319.03 P
-0.36 (A) 500.44 319.03 P
-0.36 (TS) 507.77 319.03 P
(is terminated\051.) 107.73 305.03 T
2 10 Q
(    clockTick = read_int\050\322TICK\323\051; // read the clock tick) 127.57 282.36 T
(    if \050clockTick < 1\051) 127.57 270.36 T
(        syntax0\050\322invalid TICK\323\051;) 127.57 258.36 T
(    alarme\050 &clockEvent, clockTick\051;) 127.57 246.36 T
(    skip\050\324,\325\051;) 127.57 234.36 T
0 12 Q
-0.1 (The clock tick may not be zero. Besides that it w) 107.73 209.03 P
-0.1 (ould not be useful, it is not allo) 340.93 209.03 P
-0.1 (wed to) 489.29 209.03 P
(ask the scheduler for an acti) 107.73 195.03 T
(v) 241.72 195.03 T
(ation after zero time steps. F) 247.42 195.03 T
(or performance reasons, this) 383.88 195.03 T
(is, ho) 107.73 181.03 T
(we) 133.43 181.03 T
(v) 147.12 181.03 T
(er) 152.94 181.03 T
(, not tested by the scheduler interf) 161.79 181.03 T
(ace routines. Syntax0\050\051 is an error mes-) 324.64 181.03 T
(sage routine which prints the message and terminates Y) 107.73 167.03 T
(A) 373.58 167.03 T
(TS. Our error message is pre-) 380.91 167.03 T
(ceeded by the current line of the input te) 107.73 153.03 T
(xt, the line number) 301.5 153.03 T
(, and the current input \336le) 391.68 153.03 T
(name. Additional parameters can be passed lik) 107.73 139.03 T
(e for the printf\050\051 function f) 331.23 139.03 T
(amily \050see) 458.74 139.03 T
(Section) 107.73 125.03 T
(13.0 on page) 146.73 125.03 T
(25\051.) 211.38 125.03 T
(Alarme\050\051 is a scheduler routine. The call requests that the early\050\051 method of our object) 107.73 111.03 T
(shall be acti) 107.73 97.03 T
(v) 164.75 97.03 T
(ated in the \336rst half of the time step \050) 170.45 97.03 T
2 F
(SimTime) 348.1 97.03 T
0 F
(+clockT) 398.5 97.03 T
(ick\051. The simula-) 438.17 97.03 T
-0.39 (tor clock) 107.73 83.03 P
2 F
-0.94 (SimTime) 152.26 83.03 P
0 F
-0.39 ( is zero during init\050\051. As \336rst ar) 202.66 83.03 P
-0.39 (gument, we pass the e) 349.02 83.03 P
-0.39 (v) 452.79 83.03 P
-0.39 (ent which we) 458.61 83.03 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 6
%%Page: "5" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(5) 520.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(ha) 107.73 763.03 T
(v) 118.82 763.03 T
(e initialized with the constructor) 124.64 763.03 T
(. This e) 279.29 763.03 T
(v) 314.65 763.03 T
(ent structure is directly used by the sched-) 320.48 763.03 T
(uler) 107.73 749.03 T
(, so it does not need to create and initialize an o) 125.91 749.03 T
(wn data structure.) 353.57 749.03 T
(Remark: The price for the f) 107.73 735.03 T
(airly f) 239.24 735.03 T
(ast operation of the scheduler are some subtle appli-) 268.11 735.03 T
(cation rules, please pay attention for the details gi) 107.73 721.03 T
(v) 345.72 721.03 T
(en in Section) 351.54 721.03 T
(4.0 on page) 417.21 721.03 T
(8 and) 475.86 721.03 T
(Section) 107.73 707.03 T
(8.0 on page) 146.73 707.03 T
(20. The ne) 205.38 707.03 T
(xt tw) 256.19 707.03 T
(o code lines de\336ne input and output of our object.) 280.41 707.03 T
2 10 Q
(    output\050\322OUT\323\051;) 127.57 684.36 T
(    stdinp\050\051;) 127.57 672.36 T
0 12 Q
(Ouptut\050\051 is a method of class in1out. It reads the w) 107.73 647.03 T
(ord OUT from the input te) 351.24 647.03 T
(xt, fol-) 478.05 647.03 T
(lo) 107.73 633.03 T
(wed by a \324=\325. Then an input name of another netw) 116.76 633.03 T
(ork object is e) 357.69 633.03 T
(xpected and read.) 425.16 633.03 T
(This name is remembered in an internal data structure of class in1out. During the con-) 107.73 619.03 T
(nection process handled by the base classes, the object members suc \050pointer to the) 107.73 605.03 T
(successor\051 and shand \050input k) 107.73 591.03 T
(e) 249.58 591.03 T
(y number of the successor\051, which we will use lateron,) 254.73 591.03 T
(are initialized. F) 107.73 577.03 T
(or objects with more than one output, the base class inxout has to be) 185.87 577.03 T
(used, it pro) 107.73 563.03 T
(vides the necessary methods for multiple outputs \050see Section) 161.21 563.03 T
(7.0 on) 460.18 563.03 T
(page) 107.73 549.03 T
(16\051.) 133.38 549.03 T
(Stdinp\050\051 ag) 107.73 535.03 T
(ain is a method of the base class. The call indicates that our object has an) 161.33 535.03 T
-0.06 (input whichs name equals the object name. The input k) 107.73 521.03 P
-0.06 (e) 371.72 521.03 P
-0.06 (y number is 0. There are other) 376.87 521.03 P
(methods to declare inputs with name e) 107.73 507.03 T
(xtensions and other k) 292.19 507.03 T
(e) 394.39 507.03 T
(y v) 399.54 507.03 T
(alues \050see Section) 414.24 507.03 T
(7.0) 503.22 507.03 T
(on page) 107.73 493.03 T
(16\051.) 148.38 493.03 T
2 10 Q
(    myCounter = 0; // this also could be part of the) 127.57 470.36 T
(                   // constructor vciCnt::vciCnt\050\051) 127.57 458.36 T
(    myClock = 0;) 127.57 446.36 T
(}   // end of vciCnt::init\050\051) 127.57 434.36 T
0 12 Q
-0.11 (When init\050\051 returns, the parser e) 107.73 409.03 P
-0.11 (xpects the \336nal \324;\325 of the de\336nition statement, re) 260.28 409.03 P
-0.11 (gisters) 490.2 409.03 P
(the ne) 107.73 395.03 T
(w object at the symbol table \050using the member \324name\325\051, and continues process-) 136.42 395.03 T
(ing the input te) 107.73 381.03 T
(xt. The \336rst simulation statement Sim->Run ... in) 179.88 381.03 T
(v) 415.19 381.03 T
(ok) 420.95 381.03 T
(es the connection) 432.83 381.03 T
-0.15 (process which is handled by our base classes. When the simulation then is running, we) 107.73 367.03 P
(- hopefully - will recei) 107.73 353.03 T
(v) 215.4 353.03 T
(e data objects. A preceeding object calls our rec\050\051 method for) 221.22 353.03 T
-0.46 (that purpose. In order to allo) 107.73 339.03 P
-0.46 (w deb) 241.75 339.03 P
-0.46 (ugging \050see Section) 270.04 339.03 P
-0.46 (4.1 on page) 366.76 339.03 P
-0.46 (8\051, the macro) 424.49 339.03 P
2 F
-1.12 (REC) 489.74 339.03 P
0 F
-0.46 ( is) 511.34 339.03 P
(used instead of the real name) 107.73 325.03 T
2 F
(rec) 250.36 325.03 T
0 F
( for the method de\336nition. In standard mode,) 271.96 325.03 T
2 F
(REC) 489.94 325.03 T
0 F
(e) 107.73 311.03 T
(xpands to) 112.88 311.03 T
2 F
(rec) 162.21 311.03 T
0 F
(.) 183.81 311.03 T
2 10 Q
(rec_typ vciCnt::REC\050data *pd, int\051 // REC is a macro normally) 127.57 288.36 T
(                                   // expanding to \324rec\325) 127.57 276.36 T
({) 127.57 264.36 T
0 12 Q
-0.09 (The pointer pd contains the pointer to the data object, the second ar) 107.73 239.03 P
-0.09 (gument is the input) 429.42 239.03 P
(k) 107.73 225.03 T
(e) 113.61 225.03 T
(y number) 118.75 225.03 T
(. Since we only ha) 163.76 225.03 T
(v) 251.84 225.03 T
(e one input, we do not need to e) 257.65 225.03 T
(v) 410.33 225.03 T
(aluate it. The pointer) 416.03 225.03 T
(pd points to a general data object. If we w) 107.73 211.03 T
(ant to access the VCI then we \336rst ha) 308.89 211.03 T
(v) 487.29 211.03 T
(e to) 493.11 211.03 T
-0.05 (ensure that the data object actually is of class cell or of a deri) 107.73 197.03 P
-0.05 (v) 399.65 197.03 P
-0.05 (ed class \050only cells ha) 405.47 197.03 P
-0.05 (v) 510.33 197.03 P
-0.05 (e) 516.15 197.03 P
-0.27 (a VCI\051. This is done by typecheck\050\051. The method pro) 107.73 183.03 P
-0.27 (vided by the base class checks the) 360.04 183.03 P
-0.47 (data type and generates an error message if the class does not \336t \050termination of Y) 107.73 169.03 P
-0.47 (A) 493.55 169.03 P
-0.47 (TS\051.) 500.89 169.03 P
(In case we had more than one input, we w) 107.73 155.03 T
(ould ha) 309.55 155.03 T
(v) 344.98 155.03 T
(e had to use typecheck_i\050\051 \050see) 350.8 155.03 T
(Section) 107.73 141.03 T
(7.5 on page) 146.73 141.03 T
(19\051.) 205.38 141.03 T
-0.02 (No) 107.73 127.03 P
-0.02 (w we are sure that pd points to a cell \050or deri) 122.09 127.03 P
-0.02 (v) 335.81 127.03 P
-0.02 (ed class\051, thus we can cast the pointer) 341.63 127.03 P
-0.02 (.) 521.42 127.03 P
2 10 Q
(    typecheck\050pd, CellType\051; // CellType is a key number) 127.57 104.36 T
(                             // for cell objects) 127.57 92.36 T
(    cell *pc = \050cell *\051 pd;) 127.57 80.36 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 7
%%Page: "6" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(6) 520.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(    if \050pc->vci == myVCI\051 // without pc:) 127.57 764.36 T
(                          // if\050\050\050cell*\051pd\051->vci==myVCI\051) 127.57 752.36 T
(    {   if \050 ++myCounter == 0\051) 127.57 740.36 T
(            errm1s\050\322%s: overflow of counter\323, name\051;) 127.57 728.36 T
(        return suc->rec\050pd, shand\051;) 127.57 716.36 T
(           // Do *not* use REC when calling a rec\050\051 method.) 127.57 704.36 T
(           // Otherwise, a syntax error appears in debug mode.) 127.57 692.36 T
(    }) 127.57 680.36 T
0 12 Q
(Errm1s\050\051 resembles the syntax\050\051 function f) 107.73 655.03 T
(amily) 311.89 655.03 T
(, b) 338.45 655.03 T
(ut it does not print an) 350.21 655.03 T
(y information) 452.37 655.03 T
(related to the input te) 107.73 641.03 T
(xt \050see Section) 209.54 641.03 T
(13.0 on page) 283.19 641.03 T
(25\051. It remains to forw) 347.85 641.03 T
(ard the data) 456.04 641.03 T
-0.06 (object to the successor) 107.73 627.03 P
-0.06 (. The pointer \324suc\325, and the input k) 215.21 627.03 P
-0.06 (e) 381.01 627.03 P
-0.06 (y number \324shand\325 ha) 386.16 627.03 P
-0.06 (v) 484.73 627.03 P
-0.06 (e been) 490.55 627.03 P
-0.42 (initialized by in1out. The return v) 107.73 613.03 P
-0.42 (alue of the rec\050\051 method indicates whether a sender of) 267.33 613.03 P
(data may continue transmission. W) 107.73 599.03 T
(e simply pass this return v) 275.75 599.03 T
(alue to our preceeding) 401.11 599.03 T
(object. If the cell does not carry the right VCI, it is deleted, and we return ContSend.) 107.73 585.03 T
(This means that the preceeding object may continue to send in the ne) 107.73 571.03 T
(xt time step.) 438.83 571.03 T
2 10 Q
(    else) 127.57 548.36 T
(    {   delete pd;) 127.57 536.36 T
(        return ContSend;) 127.57 524.36 T
(    }) 127.57 512.36 T
(}   // end of vciCnt::rec\050\051) 127.57 500.36 T
0 12 Q
(When the \336rst) 107.73 475.03 T
2 F
(clockTick) 178.72 475.03 T
0 F
( time steps ha) 243.52 475.03 T
(v) 308.94 475.03 T
(e been processed, we are called in the \336rst) 314.76 475.03 T
(half of the time step \050the scheduler di) 107.73 461.03 T
(vides each time step into tw) 286.39 461.03 T
(o phases, during the) 419.93 461.03 T
(\336rst phase already early\050\051 is called\051. W) 107.73 447.03 T
(e increment the clock and re) 293.04 447.03 T
(gister ag) 428.49 447.03 T
(ain. The) 469.42 447.03 T
(ar) 107.73 433.03 T
(gument of early\050\051 is just the e) 116.83 433.03 T
(v) 257.85 433.03 T
(ent structure we ha) 263.67 433.03 T
(v) 354.4 433.03 T
(e used for re) 360.22 433.03 T
(gistration. This is) 419.68 433.03 T
(sometimes useful since an e) 107.73 419.03 T
(v) 241.41 419.03 T
(ent comprises a k) 247.23 419.03 T
(e) 330.76 419.03 T
(y v) 335.91 419.03 T
(alue which allo) 350.61 419.03 T
(ws to tell between) 423.63 419.03 T
(dif) 107.73 405.03 T
(ferent timers, if more than one are in usage. Here we only ha) 120.76 405.03 T
(v) 411.77 405.03 T
(e one timer) 417.59 405.03 T
(, so we do) 471.1 405.03 T
(not need to look into the k) 107.73 391.03 T
(e) 233.61 391.03 T
(y) 238.76 391.03 T
(. The important members in the e) 243.98 391.03 T
(v) 403.32 391.03 T
(ent structure ha) 409.14 391.03 T
(v) 482.88 391.03 T
(e not) 488.7 391.03 T
(been changed, so we can directly reuse the e) 107.73 377.03 T
(v) 320.36 377.03 T
(ent structure for the ne) 326.17 377.03 T
(xt re) 434.63 377.03 T
(gistration.) 456.11 377.03 T
2 10 Q
(void vciCnt::early\050event *\051) 127.57 354.36 T
({) 127.57 342.36 T
(    if \050 ++myClock == 0\051) 127.57 330.36 T
(        errm1s\050\322%s: overflow of clock\323, name\051;) 127.57 318.36 T
(    alarme\050 &clockEvent, clockTick\051; // register again) 127.57 306.36 T
(}   // end of vciCnt::early\050\051) 127.57 294.36 T
0 12 Q
(The base class pro) 107.73 269.03 T
(vides a counter named \324counter\325, together with methods allo) 195.85 269.03 T
(wing to) 484.5 269.03 T
(read and reset this counter from the simulator input \336le \050see Section) 107.73 255.03 T
(7.0 on page) 436.35 255.03 T
(16\051.) 495 255.03 T
-0.27 (Since we did not use \324counter\325, these methods ha) 107.73 241.03 P
-0.27 (v) 340.31 241.03 P
-0.27 (e to be pro) 346.13 241.03 P
-0.27 (vided. In order to not o) 396.14 241.03 P
-0.27 (v) 505.28 241.03 P
-0.27 (er-) 511.1 241.03 P
(complicate this e) 107.73 227.03 T
(xample, only the method for reading is described here. F) 188.87 227.03 T
(or reseting,) 460.31 227.03 T
(see the command\050\051 method speci\336ed in Section) 107.73 213.03 T
(5.5 on page) 338.03 213.03 T
(11.) 396.69 213.03 T
(Export\050\051 is a method used both by the parser and by other netw) 107.73 199.03 T
(ork objects \050e.g. online) 410.22 199.03 T
(displays\051, if the) 107.73 185.03 T
(y w) 181.88 185.03 T
(ant to g) 199.42 185.03 T
(ain read access to a certain v) 235.36 185.03 T
(ariable. The asking party speci-) 372.34 185.03 T
-0.05 (\336es a string, and we ha) 107.73 171.03 P
-0.05 (v) 217.21 171.03 P
-0.05 (e to reply with a pointer to the wished v) 223.03 171.03 P
-0.05 (ariable. By con) 413.25 171.03 P
-0.05 (v) 485.65 171.03 P
-0.05 (ention) 491.47 171.03 P
(this pointer is only used for reading. Both request and reply information are part of an) 107.73 157.03 T
-0.01 (object of class e) 107.73 143.03 P
-0.01 (xp_typ which is ar) 184.49 143.03 P
-0.01 (gument of e) 273.22 143.03 P
-0.01 (xport\050\051. The method shall return TR) 330.34 143.03 P
-0.01 (UE,) 502.44 143.03 P
(if the operation w) 107.73 129.03 T
(as successful, F) 192.59 129.03 T
(ALSE otherwise.) 266.69 129.03 T
2 10 Q
(int vciCnt::export\050exp_typ *msg\051) 127.57 106.36 T
({) 127.57 94.36 T
(    return baseclass::export\050msg\051 ||) 127.57 82.36 T
(           intScalar\050msg, \322TheCounter\323, \050int *\051 &myCounter\051 ||) 127.57 70.36 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 8
%%Page: "7" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(7) 520.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(           intScalar\050msg, \322Clock\323, \050int *\051 &myClock\051;) 127.57 764.36 T
(}   // end of  vciCnt::export\050\051) 127.57 752.36 T
0 12 Q
(First we try our base class \050baseclass is the typedef in the class de\336nition v) 107.73 727.03 T
(ery abo) 466.17 727.03 T
(v) 501.64 727.03 T
(e\051.) 507.46 727.03 T
(If it w) 107.73 713.03 T
(as successful, then the e) 136.93 713.03 T
(v) 251.61 713.03 T
(aluation of the or) 257.31 713.03 T
(-e) 339.39 713.03 T
(xpression is \336nished, and e) 348.53 713.03 T
(xport\050\051) 478.01 713.03 T
(returns TR) 107.73 699.03 T
(UE. Otherwise the result is determined by the calls of intScalar\050\051. This is a) 158.91 699.03 T
(method of the base class, other v) 107.73 685.03 T
(ersions to e) 264.52 685.03 T
(xport double v) 319 685.03 T
(alues and arryas are a) 388.7 685.03 T
(v) 491.74 685.03 T
(aila-) 497.44 685.03 T
-0.36 (ble \050see Section) 107.73 671.03 P
-0.36 (7.4 on page) 186 671.03 P
-0.36 (18\051. The ar) 243.94 671.03 P
-0.36 (guments of the \336rst call specify that the address) 295.99 671.03 P
(of myCounter shall be returned via msg, if the name \324TheCounter\325 has been ask) 107.73 657.03 T
(ed for) 490.2 657.03 T
(.) 517.86 657.03 T
(If this is not the case - the \336rst intScalar\050\051 returned F) 107.73 643.03 T
(ALSE -, \336nally \324Clock\325 is tried.) 358.47 643.03 T
-0.17 (The simplest w) 107.73 617.03 P
-0.17 (ay to include the ne) 180.6 617.03 P
-0.17 (w class into Y) 273.6 617.03 P
-0.17 (A) 339.98 617.03 P
-0.17 (TS is to play the code \336le \050e) 347.31 617.03 P
-0.17 (xtension) 480.92 617.03 P
-0.03 (has to be .c\051 into the directory yats/src/user/. T) 107.73 603.03 P
-0.03 (yping \324) 329.8 603.03 P
2 F
-0.08 (make config) 364.1 603.03 P
0 F
-0.03 (\325 in the yats/bin/) 443.22 603.03 P
(directory generates entries for the ne) 107.73 589.03 T
(w class in yats/bin/Mak) 283.04 589.03 T
(e\336le, and in the central) 396.58 589.03 T
(con\336guration \336le yats/src/k) 107.73 575.03 T
(ernel/class.c. T) 238.93 575.03 T
(yping \324) 310.29 575.03 T
2 F
(make) 344.62 575.03 T
0 F
(\325 afterw) 373.42 575.03 T
(ards compiles our) 410.94 575.03 T
(source code \336le and the changed yats/src/k) 107.73 561.03 T
(ernel/class.c \050see Section) 312.89 561.03 T
(3.0 on page) 436.19 561.03 T
(7\051,) 494.85 561.03 T
(and links all together) 107.73 547.03 T
(. No) 208.06 547.03 T
(w the ne) 228.42 547.03 T
(w class should be a) 268.78 547.03 T
(v) 361.19 547.03 T
(ailable for usage.) 366.89 547.03 T
1 16 Q
(3.0  Ho) 107.73 506.36 T
(w to Add a New Netw) 156.01 506.36 T
(ork Object Class) 303.82 506.36 T
0 12 Q
-0.09 (Normally) 107.73 479.03 P
-0.09 (, each object class is coded in its o) 152.94 479.03 P
-0.09 (wn source code \336le. There are tw) 316.88 479.03 P
-0.09 (o w) 475.82 479.03 P
-0.09 (ays to) 493.27 479.03 P
(add a netw) 107.73 465.03 T
(ork class.) 159.59 465.03 T
1 14 Q
(3.1  Con\336guration by Hand) 107.73 431.7 T
0 12 Q
(T) 107.73 405.03 T
(o establish the connection to the simulation k) 114.1 405.03 T
(ernel by hand, three things ha) 330.98 405.03 T
(v) 472.71 405.03 T
(e to be) 478.53 405.03 T
(done:) 107.73 391.03 T
(1.) 107.73 371.03 T
(De\336nition of an intermediate routine which can be called by the parser for object) 121.9 371.03 T
(creation. This is easily done by including the macro) 121.9 357.03 T
2 F
(CONSTRUCTOR\050NameOfIntermRout, InternalClassName\051;) 121.9 343.03 T
0 F
(into the source code \336le \050see Section) 121.9 329.03 T
(5.1 on page) 300.87 329.03 T
(9\051.) 359.52 329.03 T
(2.) 107.73 309.03 T
(Declaration of the ne) 121.9 309.03 T
(w class in the source code \336le \322class.c\323. Here, the name of the) 222.57 309.03 T
(intermediate routine is associated to the class name to be used in the simulation) 121.9 295.03 T
(input \336le.) 121.9 281.03 T
(3.) 107.73 261.03 T
(Include the name of the object code \336le into the list in the Mak) 121.9 261.03 T
(e\336le, and call mak) 423.41 261.03 T
(e) 511.28 261.03 T
(depend.) 121.9 247.03 T
1 14 Q
(3.2) 107.73 212.36 T
(A) 132.23 212.36 T
(utomatic Con\336guration) 141.63 212.36 T
0 12 Q
(All code \336les for user speci\336c netw) 107.73 185.03 T
(ork object classes are collected in the directory) 277.58 185.03 T
(src/user/) 141.74 171.03 T
(T) 107.73 157.03 T
(o install a netw) 114.1 157.03 T
(ork object class, simply put copies of or links to the corresponding .c) 186.98 157.03 T
(and .h \336les into the src/user directory) 107.73 143.03 T
(. T) 285.26 143.03 T
(yping) 297.63 143.03 T
(% mak) 141.74 129.03 T
(e con\336g) 175.28 129.03 T
(in the bin/ directory scans src/user/ for .c \336les and generates appropriate entries in the) 107.73 115.03 T
(Mak) 107.73 101.03 T
(e\336le and in src/k) 129.6 101.03 T
(ernel/class.c. Y) 209.14 101.03 T
(our .c \336le has to comprise tw) 281.46 101.03 T
(o things:) 420.33 101.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 9
%%Page: "8" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(8) 520.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(1.) 107.73 763.03 T
(De\336nition of the intermediate routine which can be called by the parser for object) 121.9 763.03 T
(creation. This is done as described in Section) 121.9 749.03 T
(3.1 on page) 341.54 749.03 T
(7.) 400.19 749.03 T
(2.) 107.73 729.03 T
(The macro USERCLASS\050NameAsString, NameOfIntermRout\051. NameAsString is) 121.9 729.03 T
(the name of the object class to be used in the simulator input \336le. Mak) 121.9 715.03 T
(e con\336g) 458.75 715.03 T
(searches the .c \336les in src/user for lines containing USERCLASS, and copies this) 121.9 701.03 T
(lines into src/k) 121.9 687.03 T
(ernel/class.c.) 192.45 687.03 T
(F) 107.73 661.03 T
(or an e) 114.22 661.03 T
(xample, see the \336le src/usr/e) 146.69 661.03 T
(xample.c. T) 282.82 661.03 T
(o install this e) 338.85 661.03 T
(xample, rename src/usr) 405.67 661.03 T
(to src/user) 107.73 647.03 T
(, and type \324mak) 156.9 647.03 T
(e con\336g\325 and \324mak) 231.43 647.03 T
(e\325 in the bin/ directory) 321.63 647.03 T
(.) 428.16 647.03 T
1 16 Q
(4.0  Fr) 107.73 606.36 T
(equent Err) 152.32 606.36 T
(ors and Deb) 227.13 606.36 T
(ugging) 309.49 606.36 T
1 14 Q
(4.1  Usage of the Rec\050\051 Method) 107.73 571.7 T
0 12 Q
(Remainder \050see Section) 107.73 545.03 T
(5.3 on page) 224.7 545.03 T
(11\051:) 283.36 545.03 T
3 F
(\245) 107.73 525.03 T
0 F
(Rec\050\051 can only be used during the early phase of a time slot. Y) 121.9 525.03 T
(ou do not kno) 420.52 525.03 T
(w your) 486.56 525.03 T
(succeeding object, and most more comple) 121.9 511.03 T
(x netw) 323.02 511.03 T
(ork objects rely on recei) 355.23 511.03 T
(ving only) 470.9 511.03 T
(in the early phase.) 121.9 497.03 T
3 F
(\245) 107.73 477.03 T
0 F
(Per time slot, you must not send more than one data item. Classes lik) 121.9 477.03 T
(e delay lines) 452.78 477.03 T
(and multiple) 121.9 463.03 T
(x) 182.06 463.03 T
(ers simply cause a core dump when violating this rule.) 187.88 463.03 T
(A \336rst w) 107.73 437.03 T
(ay to deb) 149.61 437.03 T
(ug violations of this tw) 193.36 437.03 T
(o rules is to uncomment the de\336nition of the) 303.92 437.03 T
-0.42 (pre-processor v) 107.73 423.03 P
-0.42 (ariable) 181.31 423.03 P
2 F
-1.01 (RECEIVE_DEBUG) 216.54 423.03 P
0 F
-0.42 ( at the be) 310.14 423.03 P
-0.42 (ginning of the \336le src/k) 352.34 423.03 P
-0.42 (ernel/defs.h.) 462.53 423.03 P
-0.32 (This rede\336nes all calls of rec\050\051 methods to calls of a check routine pro) 107.73 409.03 P
-0.32 (vided by the base) 439.03 409.03 P
(class) 107.73 395.03 T
2 F
(root) 134.05 395.03 T
0 F
(. The base class performs the tests and generates error messages if neces-) 162.85 395.03 T
-0.4 (sary) 107.73 381.03 P
-0.4 (. Then the original rec\050\051 method is called. This requires that the rec\050\051 methods of all) 126.94 381.03 P
-0.32 (netw) 107.73 367.03 P
-0.32 (ork object classes are declared \050in the class de\336nition\051 and  de\336ned \050method body\051) 130.93 367.03 P
(with the macro name) 107.73 353.03 T
2 F
(REC\050...\051) 211.71 353.03 T
0 F
( instead of rec\050...\051.) 269.31 353.03 T
(The) 359.94 353.03 T
2 F
(RECEIVE_DEBUG) 381.6 353.03 T
0 F
( mode) 475.2 353.03 T
(cannot be used together with classes which do not use the) 107.73 339.03 T
2 F
(REC\050\051) 387.35 339.03 T
0 F
( macro, since this) 423.35 339.03 T
(leads to incorrect C++ code. Thus, syntax errors during compilation with) 107.73 325.03 T
2 F
(RECEIVE_DEBUG) 107.73 311.03 T
0 F
( sho) 201.33 311.03 T
(w the places where the change to) 220.7 311.03 T
2 F
(REC\050\051) 382.31 311.03 T
0 F
( has been for) 418.31 311.03 T
(gotten.) 479.74 311.03 T
(The deb) 107.73 297.03 T
(ugging mode slo) 146.48 297.03 T
(ws the simulator do) 226.18 297.03 T
(wn by typically 50 per cent.) 320.21 297.03 T
4 F
-0.37 (Important:) 107.73 283.03 P
0 F
-0.37 (Calls of the rec\050\051 methods) 162.35 283.03 P
4 F
-0.37 (must not) 288.14 283.03 P
0 F
-0.37 ( be changed. Otherwise, a syntax error is) 328.77 283.03 P
(generated in deb) 107.73 269.03 T
(ugging mode \050Hence, these mistak) 186.79 269.03 T
(es are easily found, too\051.) 352.98 269.03 T
1 F
(Note) 107.73 243.03 T
0 F
(: The RECEIVE_DEB) 131.71 243.03 T
(UG mode can generate wrong \050i.e. too man) 240.26 243.03 T
(y\051 error mes-) 447.69 243.03 T
(sages, if the simulation time is reset between tw) 107.73 229.03 T
(o runs \050command Sim->ResetT) 337.25 229.03 T
(ime\051.) 487.92 229.03 T
(As a second w) 107.73 203.03 T
(ay) 177.26 203.03 T
(, you can use the netw) 187.8 203.03 T
(ork object class T) 294.33 203.03 T
(ypeCheck \050see User\325) 378.35 203.03 T
(s Man-) 477.65 203.03 T
(ual\051. This object can be included into each output line of your ne) 107.73 189.03 T
(w object. It checks,) 417.71 189.03 T
(that both rules are met, and produces appropriate error messages.) 107.73 175.03 T
1 14 Q
(4.2  Ev) 107.73 141.7 T
(ent Handling) 148.43 141.7 T
0 12 Q
(Remainder \050see Section) 107.73 115.03 T
(8.0 on page) 224.7 115.03 T
(20\051:) 283.36 115.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 10
%%Page: "9" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(9) 520.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(\245) 107.73 763.03 T
0 F
(An e) 121.9 763.03 T
(v) 144.59 763.03 T
(ent structure must not be used twice at the same time. It can be reused only if) 150.41 763.03 T
(the corresponding timer has e) 121.9 749.03 T
(xpired \050the object has been acti) 263.69 749.03 T
(v) 413.02 749.03 T
(ated\051, or if the timer) 418.72 749.03 T
(has been stopped with unalarme\050\051 or unalarml\050\051.) 121.9 735.03 T
3 F
(\245) 107.73 715.03 T
0 F
-0.19 (The time dif) 121.9 715.03 P
-0.19 (ference speci\336ed in alarme\050\051 / alarml\050\051 calls may not be lo) 180.56 715.03 P
-0.19 (wer than one.) 456.99 715.03 P
(There are tw) 121.9 701.03 T
(o e) 182.42 701.03 T
(xceptions of this rule: If the simulation is not running \050e.g. during) 196.56 701.03 T
-0.23 (the init\050\051 method or when processing a command e) 121.9 687.03 P
-0.23 (xcept Sim->Run\051, the time dif) 363.87 687.03 P
-0.23 (fer-) 507.1 687.03 P
-0.41 (ence may be zero. Zero time dif) 121.9 673.03 P
-0.41 (ference also is le) 272.11 673.03 P
-0.41 (g) 351.02 673.03 P
-0.41 (al during the early slot phase when) 356.96 673.03 P
(setting a timer for the late phase of the same slot \050alarml\050..., 0\051\051.) 121.9 659.03 T
(T) 107.73 633.03 T
(o \336nd violations of this rules, you can de\336ne the C++ preprocessor v) 114.1 633.03 T
(ariable) 442.97 633.03 T
2 F
(EVENT_DEBUG) 107.73 619.03 T
0 F
( in the source code \336le \322defs.h\323 \050uncomment the line at the be) 186.93 619.03 T
(ginning) 483.69 619.03 T
(of the \336le\051. Afterw) 107.73 605.03 T
(ards you ha) 197.58 605.03 T
(v) 252.66 605.03 T
(e to recompile. No) 258.48 605.03 T
(w) 347.5 605.03 T
(, tests are performed for all) 355.38 605.03 T
(alarme\050\051, alarml\050\051, eache\050\051, and eachl\050\051 calls. The additional code will slo) 107.73 591.03 T
(w do) 458.65 591.03 T
(wn the) 482.02 591.03 T
(simulator by approximately 10 to 15 per cent.) 107.73 577.03 T
1 14 Q
(4.3  Locating Err) 107.73 543.7 T
(oneous Netw) 210.14 543.7 T
(ork Objects) 285.82 543.7 T
0 12 Q
(When de) 107.73 517.03 T
(v) 150.41 517.03 T
(eloping more comple) 156.23 517.03 T
(x netw) 258.04 517.03 T
(ork object modules, core dumps unfortunately) 290.25 517.03 T
-0.25 (are used to happen. T) 107.73 503.03 P
-0.25 (o locate the causing netw) 208.73 503.03 P
-0.25 (ork module in a straightforw) 328.91 503.03 P
-0.25 (ard manner) 465.09 503.03 P
-0.25 (,) 518.67 503.03 P
(you can turn on logging of object acti) 107.73 489.03 T
(v) 287.74 489.03 T
(ation \050calls of early\050\051/late\050\051\051. In the source code) 293.44 489.03 T
(\336le \322k) 107.73 475.03 T
(ernel/sim.c\323, there is a preprocessor v) 137.27 475.03 T
(ariable EVENT_LOG. It is normally com-) 317.92 475.03 T
-0.28 (mented. De\336ning this v) 107.73 461.03 P
-0.28 (ariable causes the scheduler to print a log message for each acti-) 219.26 461.03 P
(v) 107.73 447.03 T
(ation occuring at a simulation time not smaller than EVENT_LOG. The message has) 113.43 447.03 T
(the form) 107.73 433.03 T
2 F
(  currTime: objName->{early|late}{Evt|Tim}\050begin ... end\051) 107.73 419.03 T
(Early) 107.73 405.03 T
0 F
( and) 143.73 405.03 T
2 F
(late) 167.05 405.03 T
0 F
( tell early and late time slot phase,) 195.85 405.03 T
2 F
(Evt) 362.83 405.03 T
0 F
( and) 384.43 405.03 T
2 F
(Tim) 407.76 405.03 T
0 F
(distinguish) 436.56 405.03 T
-0.23 (between e) 107.73 391.03 P
-0.23 (v) 155.51 391.03 P
-0.23 (ent and time triggered acti) 161.32 391.03 P
-0.23 (v) 286.07 391.03 P
-0.23 (ation \050see Section) 291.77 391.03 P
-0.23 (8.0 on page) 379.62 391.03 P
-0.23 (20\051. The message) 437.81 391.03 P
(is printed to standard output \320 e) 107.73 377.03 T
(xcept the \336nal) 259.54 377.03 T
2 F
(end\051) 330.53 377.03 T
0 F
( \320 before entering the object) 359.33 377.03 T
(method. The tail of the message appears upon method completion.) 107.73 363.03 T
(W) 107.73 337.03 T
(ith a deb) 118.57 337.03 T
(ugger) 159.66 337.03 T
(, you g) 186.51 337.03 T
(ain access to the erroneous object e.g. as follo) 219.45 337.03 T
(ws. De\336ne a glo-) 439.1 337.03 T
(bal pointer v) 107.73 323.03 T
(ariable \050type as the class you w) 168.09 323.03 T
(ant to deb) 317.93 323.03 T
(ug\051 in the source code \336le of the) 365.02 323.03 T
-0.07 (object class. In the init\050\051 method, you initialize the global pointer) 107.73 309.03 P
-0.07 (, if the object name is) 418.52 309.03 P
(the right one:) 107.73 295.03 T
2 F
(  if \050strcmp\050name, \322xyz\323\051 == 0\051  theDebugPtr = this;) 107.73 281.03 T
0 F
(Upon processing the declaration statement in the simulator input \336le, you can access) 107.73 267.03 T
(the object members via) 107.73 253.03 T
2 F
(theDebugPtr) 222.38 253.03 T
0 F
(.) 300.92 253.03 T
1 16 Q
(5.0  Netw) 107.73 212.36 T
(ork Object Classes and Their Methods) 171.1 212.36 T
0 12 Q
-0.01 (The root class for netw) 107.73 185.03 P
-0.01 (ork objects is \322root\323. This class declares the methods described) 218.22 185.03 P
(belo) 107.73 171.03 T
(w as virtual functions containing an error message.) 128.09 171.03 T
1 14 Q
(5.1  Object Cr) 107.73 137.7 T
(eation) 192.23 137.7 T
0 12 Q
-0.07 (The parser does not call directly the constructor of a class. Instead he in) 107.73 111.03 P
-0.07 (v) 450.27 111.03 P
-0.07 (ok) 456.03 111.03 P
-0.07 (es the inter-) 467.91 111.03 P
(mediate routine declared in usr_classes\050\051 \050source code \336le \322class.c\323\051. This routine is) 107.73 97.03 T
-0.29 (part of the source code \336le of the object class and creates the object. The re) 107.73 83.03 P
-0.29 (gistration of) 463.68 83.03 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 11
%%Page: "10" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(10) 516.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(the object at the symbol manager is done by the parser after calling the ne) 107.73 763.03 T
(w object\325) 461.35 763.03 T
(s) 505.68 763.03 T
(init\050\051-method. T) 107.73 749.03 T
(o de\336ne the intermediate routine, you can use the macro) 184.1 749.03 T
2 F
(CONSTRUCTOR\050NameOfIntermRout, InternalClassName\051;) 107.73 735.03 T
0 F
-0.35 (In case the object class shall not really create objects, the intermediate routine has to be) 107.73 721.03 P
(programmed \322by hand\323 and has to return a NULL pointer \050normally) 107.73 707.03 T
(, the ne) 434.21 707.03 T
(w object\325) 468.9 707.03 T
(s) 513.23 707.03 T
(address, see e.g. signal.c\051.) 107.73 693.03 T
-0.38 (In most cases, the constructor of a class can stay empty) 107.73 667.03 P
-0.38 (. At least, the constructor should) 368.07 667.03 P
-0.46 (not read from the input \336le, since the constructor is also e) 107.73 653.03 P
-0.46 (x) 378.47 653.03 P
-0.46 (ecuted when creating objects) 384.29 653.03 P
(of deri) 107.73 639.03 T
(v) 139.08 639.03 T
(ed classes. The de\336nition statement is processed in the init\050\051-method.) 144.9 639.03 T
2 F
(void) 107.73 613.03 T
( newClass::init\050void\051;) 136.53 613.03 T
0 F
-0.27 (When called by the parser) 121.9 593.03 P
-0.27 (, the current input symbol is yet the class name. The name) 245.65 593.03 P
(can be tak) 121.9 579.03 T
(en from) 170.43 579.03 T
2 F
(tval.nam) 211.08 579.03 T
0 F
(, b) 268.68 579.03 T
(ut must not be freed. The symbol is skipped with) 280.44 579.03 T
2 F
-0.2 (skip\050CLASS\051) 121.9 565.03 P
0 F
-0.09 (. Reading the object name and e) 201.1 565.03 P
-0.09 (v) 353.93 565.03 P
-0.09 (aluating of parameters is done via) 359.63 565.03 P
(parser utility routines \050see Section) 121.9 551.03 T
(9.0 on page) 288.88 551.03 T
(21\051. T) 347.54 551.03 T
(o ease deri) 375.9 551.03 T
(v) 426.92 551.03 T
(ation of other) 432.62 551.03 T
(classes, the method addpars\050\051 \050see ne) 121.9 537.03 T
(xt\051 is called at the place where deri) 299.67 537.03 T
(v) 466.98 537.03 T
(ed classes) 472.8 537.03 T
(should read their additional parameters. Classes with an o) 121.9 523.03 T
(wn init\050\051-method de\336ne) 398.56 523.03 T
(addpars\050\051 as empty \050or inherit the empty method from root\051.) 121.9 509.03 T
2 F
(void newClass::addpars\050void\051;) 107.73 483.03 T
0 F
-0.14 (A class deri) 121.9 463.03 P
-0.14 (v) 177.98 463.03 P
-0.14 (ed from another one can reuse the init\050\051-method of its base class. Read-) 183.8 463.03 P
(ing of o) 121.9 449.03 T
(wn parameters is done by o) 158.93 449.03 T
(v) 290.39 449.03 T
(erloading the addpars\050\051-method. Addpars\050\051) 296.21 449.03 T
(should beha) 121.9 435.03 T
(v) 179.32 435.03 T
(e as follo) 185.14 435.03 T
(ws:) 228.83 435.03 T
2 F
(void) 121.9 421.03 T
( xyz::addpars\050void\051) 150.7 421.03 T
({   // first call addpars\050\051 of the base class) 121.9 407.03 T
(    // baseclass is an appropriate typedef) 121.9 393.03 T
(    baseclass::addpars\050\051;) 121.9 379.03 T
(    // then read own parameters:) 121.9 365.03 T
(    xyzpar = read_int\050\322XYZPAR\323\051;) 121.9 351.03 T
(    skip\050\324,\325\051;) 121.9 337.03 T
(}) 121.9 323.03 T
0 F
(By doing so, more than one deri) 121.9 305.03 T
(v) 275.92 305.03 T
(ed class can reuse the init\050\051-method. The class) 281.74 305.03 T
(most \322closed\323 to the base class \336rst reads its parameters.) 121.9 291.03 T
1 14 Q
(5.2  Connection Establishment) 107.73 257.7 T
0 12 Q
(The methods for connection establishment mostly can be inherited from the generic) 107.73 231.03 T
(classes) 107.73 217.03 T
2 F
(in1out) 144.05 217.03 T
0 F
( and) 187.25 217.03 T
2 F
(inxout) 210.58 217.03 T
0 F
(.) 253.78 217.03 T
2 F
(void newClass::connect\050void\051;) 107.73 191.03 T
0 F
(This is a broadcast message from the k) 121.9 171.03 T
(ernel to cause connection establishment. All) 308.08 171.03 T
(objects are de\336ned, and the \336rst) 121.9 157.03 T
2 F
(Sim->Run) 277.54 157.03 T
0 F
( statement has been reached. W) 335.14 157.03 T
(ith) 485.94 157.03 T
2 F
(root *find_obj\050char *name\051;) 121.9 143.03 T
0 F
(the succeeding objects can be found. Continuation see handle\050\051-method.) 121.9 129.03 T
2 F
(int newClass::handle\050char *inpName, root *callgObject\051;) 107.73 103.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 12
%%Page: "11" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(11) 516.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(The preceeding objects sends this message to obtain the input k) 121.9 763.03 T
(e) 426.41 763.03 T
(y number of the) 431.56 763.03 T
(gi) 121.9 749.03 T
(v) 130.94 749.03 T
(en input. The method should ensure that an input is not connected to more than) 136.76 749.03 T
(one other object.) 121.9 735.03 T
1 14 Q
(5.3  Recei) 107.73 701.7 T
(ving Data) 164.74 701.7 T
2 12 Q
(rec_typ newClass::rec\050data *dataPtr, int inputKey\051;) 107.73 675.03 T
0 F
(InputK) 121.9 655.03 T
(e) 155.6 655.03 T
(y is the v) 160.74 655.03 T
(alue returned by handle\050\051 during connection setup.) 204.11 655.03 T
(An object is allo) 121.9 641.03 T
(wed to call rec\050\051 of its successor) 200.6 641.03 T
4 F
(* only once a time slot) 121.9 627.03 T
0 F
(, and) 230.22 627.03 T
4 F
(* only during the early slot phase) 121.9 613.03 T
0 F
(.) 283.23 613.03 T
-0.32 (Since the e) 121.9 599.03 P
-0.32 (xact type of the data item is unkno) 173.73 599.03 P
-0.32 (wn, it has to be check) 336.82 599.03 P
-0.32 (ed prior to access) 439.07 599.03 P
(to data item members. See Section) 121.9 585.03 T
(6.2 on page) 290.88 585.03 T
(14.) 349.54 585.03 T
-0.38 (Rec_typ is an enumeration type de\336ned in the source code \336le \322special.h\323. The rec\050\051) 121.9 571.03 P
-0.26 (return v) 121.9 557.03 P
-0.26 (alue can be e) 158.99 557.03 P
-0.26 (v) 220.21 557.03 P
-0.26 (aluated by objects which w) 225.9 557.03 P
-0.26 (ant to be controlled by the succeed-) 355.37 557.03 P
(ing object. The con) 121.9 543.03 T
(v) 214.07 543.03 T
(ention is, ho) 219.89 543.03 T
(we) 278.6 543.03 T
(v) 292.29 543.03 T
(er) 298.11 543.03 T
(, that a data item sent al) 306.95 543.03 T
(w) 420.48 543.03 T
(ays remains at the) 429.03 543.03 T
(recei) 121.9 529.03 T
(v) 144.92 529.03 T
(er \050or is lost there\051. The recei) 150.74 529.03 T
(v) 290.06 529.03 T
(er only can protect ag) 295.88 529.03 T
(ainst b) 399.78 529.03 T
(uf) 431.21 529.03 T
(fer o) 440.91 529.03 T
(v) 463.05 529.03 T
(er\337o) 468.87 529.03 T
(w) 490.56 529.03 T
(,) 498.45 529.03 T
-0.14 (when returning the stop v) 121.9 515.03 P
-0.14 (alue of rec_typ early enough. The Start-Stop protocol \050see) 243.71 515.03 P
(Section) 121.9 501.03 T
(6.4 on page) 160.9 501.03 T
(15\051 uses this mechanism.) 219.56 501.03 T
(Objects transparently passing data items \050measurement de) 121.9 487.03 T
(vices, demultiple) 400.22 487.03 T
(x) 482.03 487.03 T
(er ...\051) 487.85 487.03 T
-0.14 (should return the v) 121.9 473.03 P
-0.14 (alue gi) 211.5 473.03 P
-0.14 (v) 243.39 473.03 P
-0.14 (en by the succeeding object to its precceeding one. Thus,) 249.21 473.03 P
(these objects can be included into handshak) 121.9 459.03 T
(e lines.) 331.74 459.03 T
(REMARKS) 107.73 433.03 T
-0.38 (In order to allo) 107.73 419.03 P
-0.38 (w deb) 177.96 419.03 P
-0.38 (ugging of the usage of rec\050\051 \050see Section) 206.33 419.03 P
-0.38 (4.1 on page) 400.99 419.03 P
-0.38 (8\051, the macro) 458.9 419.03 P
(name) 107.73 405.03 T
2 F
(REC) 136.72 405.03 T
0 F
( has to be used for method declaration \050in the class de\336nition\051 and method) 158.32 405.03 T
(de\336nition \050method body\051. Calls of rec\050\051 methods, ho) 107.73 391.03 T
(we) 358.41 391.03 T
(v) 372.1 391.03 T
(er) 377.92 391.03 T
(,) 386.76 391.03 T
4 F
(must not) 392.76 391.03 T
0 F
( use the) 433.77 391.03 T
2 F
(REC) 473.43 391.03 T
0 F
(macro. Otherwise, C++ syntax errors are generated when compiling in deb) 107.73 377.03 T
(ug mode.) 466.27 377.03 T
1 14 Q
(5.4  Acti) 107.73 343.7 T
(v) 156.96 343.7 T
(ation by the Ev) 163.82 343.7 T
(ent Scheduler) 254.31 343.7 T
0 12 Q
-0.3 (The e) 107.73 317.03 P
-0.3 (v) 134.12 317.03 P
-0.3 (ent scheduler di) 139.94 317.03 P
-0.3 (vides each time slot into an early and a late phase. Dependent on) 215.02 317.03 P
(the re) 107.73 303.03 T
(gistration, one of the follo) 134.54 303.03 T
(wing methods is called for acti) 259.23 303.03 T
(v) 406.58 303.03 T
(ation.) 412.27 303.03 T
2 F
(void newClass::early\050event *eventPtr\051;) 107.73 277.03 T
(void newClass::late\050event *eventPtr\051;) 107.73 263.03 T
0 F
(The e) 121.9 243.03 T
(v) 148.59 243.03 T
(ent pointer is the address of the e) 154.41 243.03 T
(v) 312.41 243.03 T
(ent structure used for re) 318.23 243.03 T
(gistration. The) 432.02 243.03 T
(e) 121.9 229.03 T
(v) 126.93 229.03 T
(ent member e) 132.75 229.03 T
(v) 197.76 229.03 T
(entPtr) 203.58 229.03 T
(->k) 232.01 229.03 T
(e) 248.66 229.03 T
(y can be used to distinguish between dif) 253.8 229.03 T
(ferent timers.) 445.82 229.03 T
(The e) 121.9 215.03 T
(v) 148.59 215.03 T
(ent structure may be reused immediately to re) 154.41 215.03 T
(gister ag) 373.85 215.03 T
(ain. See also) 414.78 215.03 T
(Section) 121.9 201.03 T
(8.0 on page) 160.9 201.03 T
(20.) 219.56 201.03 T
1 14 Q
(5.5  Pr) 107.73 167.7 T
(ocessing Commands) 146.74 167.7 T
2 12 Q
(int newClass::command\050char *cmdName, tok_typ *retVal\051;) 107.73 141.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 13
%%Page: "12" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(12) 516.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(A command shall be processed by the object. The command name is gi) 121.9 763.03 T
(v) 463.22 763.03 T
(en in cmd-) 469.04 763.03 T
(Name. If the command is kno) 121.9 749.03 T
(wn, it is carried out. Command ar) 264.24 749.03 T
(guments can be) 425.34 749.03 T
(tak) 121.9 735.03 T
(en from the input \336le via parser utility routines \050see Section) 136.44 735.03 T
(9.0 on page) 425.42 735.03 T
(21\051.) 484.07 735.03 T
(Upon successfull completion, TR) 121.9 721.03 T
(UE is returned by command\050\051. In case the com-) 282.08 721.03 T
(mand is unkno) 121.9 707.03 T
(wn, F) 192.27 707.03 T
(ALSE is returned.) 218.72 707.03 T
-0.28 (The structure tok_typ contains the tw) 107.73 681.03 P
-0.28 (o members tok and v) 285.18 681.03 P
-0.28 (al, where the latter is a union) 384.41 681.03 P
(of an inte) 107.73 667.03 T
(ger v) 152.87 667.03 T
(alue, a double v) 176.9 667.03 T
(alue, and a char pointer) 252.58 667.03 T
(. In tok, the return type of the) 364.21 667.03 T
-0.42 (command is passed back, the v) 107.73 653.03 P
-0.42 (al union is used to store the v) 253.96 653.03 P
-0.42 (alue \050if an) 391.04 653.03 P
-0.42 (y\051. The follo) 438.66 653.03 P
-0.42 (wing) 497.84 653.03 P
(v) 107.73 639.03 T
(alues are possible for retV) 113.43 639.03 T
(al->tok:) 238.06 639.03 T
3 F
(\245) 107.73 619.03 T
0 F
(NIL) 121.9 619.03 T
(V) 140.69 619.03 T
(AR: The command does not return a v) 147.74 619.03 T
(alue, and therefore can not be used in) 331.74 619.03 T
(e) 121.9 605.03 T
(xpressions) 127.05 605.03 T
3 F
(\245) 107.73 585.03 T
0 F
(IV) 121.9 585.03 T
(AL: The return type is inte) 132.94 585.03 T
(ger) 261.08 585.03 T
(. The v) 275.74 585.03 T
(alue is stored in retV) 309.1 585.03 T
(al->v) 407.75 585.03 T
(al.i.) 432.88 585.03 T
3 F
(\245) 107.73 565.03 T
0 F
(D) 121.9 565.03 T
(V) 130.08 565.03 T
(AL: The return type is double. V) 137.13 565.03 T
(alue stored in retV) 293.44 565.03 T
(al->v) 381.09 565.03 T
(al.d.) 406.22 565.03 T
3 F
(\245) 107.73 545.03 T
0 F
(SV) 121.9 545.03 T
(AL: The return type is string. The pointer gi) 135.62 545.03 T
(v) 346.96 545.03 T
(en in retV) 352.78 545.03 T
(al->v) 399.44 545.03 T
(al.s has to specify a) 424.56 545.03 T
(dynamic cop) 121.9 531.03 T
(y) 183.44 531.03 T
(, since it is deleted in the k) 188.66 531.03 T
(ernel if necessary) 316.53 531.03 T
(.) 399.71 531.03 T
4 F
(A) 107.73 505.03 T
(TTENTION) 114.61 505.03 T
0 F
(: do not return IV) 170.63 505.03 T
(AR, SV) 253 505.03 T
(AR, or D) 289.38 505.03 T
(V) 333.23 505.03 T
(AR.) 340.27 505.03 T
(Commands can be inherited as follo) 107.73 479.03 T
(ws:) 280.41 479.03 T
2 F
(int xyz::command\050char *s, tok_typ *v\051) 107.73 465.03 T
({   // first try base class) 107.73 451.03 T
(    if \050baseclass::command\050s, v\051\051) 107.73 437.03 T
(        return TRUE;) 107.73 423.03 T
(    // then try it yourself and return TRUE or FALSE) 107.73 409.03 T
(}) 107.73 395.03 T
1 14 Q
(5.6  Exporting V) 107.73 361.7 T
(ariable Addr) 205.22 361.7 T
(esses) 282.36 361.7 T
0 12 Q
(T) 107.73 335.03 T
(o ease the rather complicated operations described ne) 114.1 335.03 T
(xt, the generic class) 370.18 335.03 T
2 F
(ino) 467.82 335.03 T
0 F
( pro-) 489.42 335.03 T
(vides con) 107.73 321.03 T
(v) 152.91 321.03 T
(enience functions which allo) 158.73 321.03 T
(w to e) 296.07 321.03 T
(xport a v) 325.21 321.03 T
(ariable with one line of source) 367.58 321.03 T
(code \050see Section) 107.73 307.03 T
(7.4 on page) 194.7 307.03 T
(18\051.) 253.36 307.03 T
2 F
(int newClass::export\050exp_typ *msg\051;) 107.73 281.03 T
0 F
(Either the parser or another object look for the address of a certain v) 121.9 261.03 T
(ariable. The) 449.18 261.03 T
-0.32 (parser does so before trying the command\050\051-method in order to e) 121.9 247.03 P
-0.32 (v) 428.99 247.03 P
-0.32 (aluate the v) 434.69 247.03 P
-0.32 (alue of) 489.07 247.03 P
(a command-lik) 121.9 233.03 T
(e e) 194.1 233.03 T
(xpression in the input \336le. Measurement objects as another e) 207.58 233.03 T
(xam-) 498.03 233.03 T
(ple w) 121.9 219.03 T
(ant to display the v) 148.11 219.03 T
(ariable ask) 239.14 219.03 T
(ed for) 290.67 219.03 T
(.) 318.33 219.03 T
(The type e) 121.9 205.03 T
(xp_typ is de\336ned in the source code \336le \322special.h\323. Msg->v) 172.37 205.03 T
(arname con-) 463.13 205.03 T
(tains the name of the v) 121.9 191.03 T
(ariable w) 230.58 191.03 T
(anted. Msg->ninds speci\336es the number of indices) 274.78 191.03 T
(gi) 121.9 177.03 T
(v) 130.94 177.03 T
(en by a user) 136.76 177.03 T
(, msg->indices[] speci\336es the indices itselfs. In case v) 193.92 177.03 T
(ariable name,) 451.68 177.03 T
(as well as number and ranges of indices are o.k., the \336eld msg->addrtype has to be) 121.9 163.03 T
(\336lled with the type of address \050inte) 121.9 149.03 T
(ger / double?, scalar / array?\051. The address itself) 289.04 149.03 T
(then is written into the right \336led of the address union in *msg. The method returns) 121.9 135.03 T
(TR) 121.9 121.03 T
(UE. In case the v) 136.76 121.03 T
(ariable is an array) 218.76 121.03 T
(, additionally the follo) 303.62 121.03 T
(wing \336elds ha) 409.98 121.03 T
(v) 477.08 121.03 T
(e to be) 482.9 121.03 T
(set. Msg->dimensions[] has to be initialized with the number of entries per dimen-) 121.9 107.03 T
(sion, and msg->displacements[] speci\336es for each dimension the displacement) 121.9 93.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 14
%%Page: "13" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(13) 516.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(between logical x v) 121.9 763.03 T
(alue and ph) 215.25 763.03 T
(ysical inde) 270.51 763.03 T
(x in the array pointer) 321.99 763.03 T
(.) 421.97 763.03 T
-0.11 (Export\050\051 returns F) 121.9 749.03 P
-0.11 (ALSE if the v) 207.44 749.03 P
-0.11 (ariable is unkno) 273.8 749.03 P
-0.11 (wn or an error occured. Inheritance) 349.94 749.03 P
(is implemented applying the same scheme as sho) 121.9 735.03 T
(wn for command\050\051.) 357.24 735.03 T
1 14 Q
(5.7  Miscellaneous) 107.73 701.7 T
2 12 Q
(char *newClass::special\050specmsg *msg, char *caller\051;) 107.73 675.03 T
0 F
(This is the method for \322all cases\323. F) 121.9 655.03 T
(or e) 294.36 655.03 T
(v) 312.39 655.03 T
(ery kind of usage, a class containing the) 318.21 655.03 T
(needed members has to be deri) 121.9 641.03 T
(v) 269.9 641.03 T
(ed from class specmsg de\336ned in \322special.h\323. Spec-) 275.72 641.03 T
(msg comprises a \336eld type to tell dif) 121.9 627.03 T
(ferent message types from each others. An) 296.6 627.03 T
(object implementing the special\050\051-method al) 121.9 613.03 T
(w) 334.42 613.03 T
(ays \336rst has to check this \336eld. F) 342.96 613.03 T
(or) 500.12 613.03 T
(e) 121.9 599.03 T
(v) 126.93 599.03 T
(ery application, an e) 132.75 599.03 T
(xtra v) 229.88 599.03 T
(alue has to be included into the enumeration) 257.24 599.03 T
(specmsg_typ \050\322special.h\323\051. Special\050\051 should return the NULL pointer in case all is) 121.9 585.03 T
(o.k. If an error occured, an error description should be returned. If this is not possi-) 121.9 571.03 T
(ble or too complicated, an error message can be launched by the object itself. F) 121.9 557.03 T
(or) 501.64 557.03 T
(this purpose, the name of the calling object is gi) 121.9 543.03 T
(v) 351.58 543.03 T
(en as second ar) 357.4 543.03 T
(gument.) 430.16 543.03 T
(Find application e) 121.9 529.03 T
(xamples in \322demux.c\323 \050writing the routing table\051 or in \322distrib) 208.38 529.03 T
(.c\323) 506.54 529.03 T
(\050e) 121.9 515.03 T
(xporting the r) 131.04 515.03 T
(.n. transformation table\051.) 195.71 515.03 T
2 F
(void newClass::restim\050void\051;) 107.73 489.03 T
0 F
(Message from the k) 121.9 469.03 T
(ernel that the simulation clock is to reset \050the command read:) 216.76 469.03 T
(Sim->ResetT) 121.9 455.03 T
(ime\051. This method only has to be implemented by classes which store) 185.58 455.03 T
(times internally \050see e.g. \322line.c\323 and \322leak) 121.9 441.03 T
(yb) 328 441.03 T
(.c\323\051. Ev) 339.52 441.03 T
(ents which ha) 376.32 441.03 T
(v) 442.07 441.03 T
(e been re) 447.89 441.03 T
(gis-) 491.02 441.03 T
(tered at the scheduler) 121.9 427.03 T
(, are corrected automatically) 223.72 427.03 T
(. The method is prede\336ned by) 359.56 427.03 T
(class root as no-op \050no error message\051.) 121.9 413.03 T
1 16 Q
(6.0  Data Object Classes, Start-Stop Pr) 107.73 372.36 T
(otocol) 372.29 372.36 T
1 14 Q
(6.1  De\336nition of Data Object Classes) 107.73 337.7 T
0 12 Q
(The rec\050\051-method is de\336ned for the class data which is the basic class for all data) 107.73 311.03 T
(objects. All data object classes and their deri) 107.73 297.03 T
(v) 321.39 297.03 T
(ation relations are de\336ned in the source) 327.09 297.03 T
(code \336le \322data.h\323. The deri) 107.73 283.03 T
(v) 237.39 283.03 T
(ation of data classes and a f) 243.09 283.03 T
(ast mechanism for run-time) 374.93 283.03 T
(data type checking allo) 107.73 269.03 T
(w that) 218.4 269.03 T
3 F
(\245) 107.73 249.03 T
0 F
(objects processing a certain data type can also process all data types deri) 121.9 249.03 T
(v) 469.52 249.03 T
(ed from) 475.34 249.03 T
(the intended one,) 121.9 235.03 T
3 F
(\245) 107.73 215.03 T
0 F
(error messages are generated, ho) 121.9 215.03 T
(we) 278.54 215.03 T
(v) 292.23 215.03 T
(er) 298.05 215.03 T
(, if incomming data items do not contain the) 306.89 215.03 T
(necessary members \050i.e. the) 121.9 201.03 T
(y are not deri) 254.68 201.03 T
(v) 318.03 201.03 T
(ed from the intended data class\051.) 323.85 201.03 T
-0.17 (In parallel, destructors of all data classes are virtual. Thus, the right destructor is found) 107.73 175.03 P
(for an object re) 107.73 161.03 T
(g) 180.52 161.03 T
(ardless of the type of pointer used in the delete statement. The combi-) 186.46 161.03 T
(nation of run-time type checking and late binding of destructors costs - e) 107.73 147.03 T
(v) 456.04 147.03 T
(en for v) 461.86 147.03 T
(ery) 499 147.03 T
(simple models - not more than 10 % speed.) 107.73 133.03 T
(Unfortunately) 107.73 119.03 T
(, deri) 174.27 119.03 T
(v) 198.63 119.03 T
(ation relations can not \050yet\051 be e) 204.33 119.03 T
(xamined automatically) 358.78 119.03 T
(. If a ne) 467.65 119.03 T
(w) 504 119.03 T
(data class is added, then therefore a couple of things has to be done in \322data.h\323 and) 107.73 105.03 T
(\322data.c\323:) 107.73 91.03 T
(1.) 107.73 71.03 T
(Add a ne) 121.9 71.03 T
(w v) 164.92 71.03 T
(alue to the enum dat_typ.) 182.28 71.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 15
%%Page: "14" 16
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(14) 516.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(2.) 107.73 763.03 T
(The follo) 121.9 763.03 T
(wing macros ha) 165.93 763.03 T
(v) 241.67 763.03 T
(e to be part of each class de\336nition:) 247.49 763.03 T
3 F
(\245) 121.9 743.03 T
0 F
(B) 129.1 743.03 T
(ASECLASS\050base_class_name\051: declaration of the base class) 136.68 743.03 T
3 F
(\245) 121.9 723.03 T
0 F
(CLASS_KEY\050dat_typ_v) 129.1 723.03 T
(alue\051: speci\336cation of the dat_typ v) 248.8 723.03 T
(alue associated to the) 418.14 723.03 T
(ne) 136.07 709.03 T
(w class) 147.1 709.03 T
3 F
(\245) 121.9 689.03 T
0 F
(NEW_DELETE\050number_of_objects_allocated_together\051: de\336nes inline ne) 129.1 689.03 T
(w and) 487.73 689.03 T
-0.51 (delete operators. The) 136.07 675.03 P
-0.51 (y decrease the simulation time by approx. 30% and initialize) 235.85 675.03 P
(the \324type\325 object members.) 136.07 661.03 T
3 F
(\245) 121.9 641.03 T
0 F
-0.21 (CLONE\050class_name\051: de\336nes the method clone\050\051 which produces a cop) 129.1 641.03 P
-0.21 (y of a data) 471.93 641.03 P
(object of unkno) 136.07 627.03 T
(wn type \050see Section) 211.1 627.03 T
(6.3 on page) 313.74 627.03 T
(14\051.) 372.4 627.03 T
(3.) 107.73 607.03 T
(De\336ne the static class member \050data *ne) 121.9 607.03 T
(w_class::pool\051 in \322data.c\323,) 315.56 607.03 T
(it has been) 445.86 607.03 T
(declared by NEW_DELETE\050\051.) 121.9 593.03 T
(4.) 107.73 573.03 T
(Re) 121.9 573.03 T
(gister the ne) 135.05 573.03 T
(w class in data_classes\050\051 \050v) 193.41 573.03 T
(ery belo) 323.86 573.03 T
(w in \322data.h\323\051. The macro) 362.55 573.03 T
(D) 121.9 559.03 T
(A) 130.08 559.03 T
(T) 137.42 559.03 T
(A_CLASS\050internal_class_name, e) 143.63 559.03 T
(xternal_name\051 uses the information of pre) 308.76 559.03 T
(vi-) 510.09 559.03 T
(ous) 121.9 545.03 T
(B) 141.57 545.03 T
(ASECLASS\050\051 and CLASS_KEY\050\051 statements to e) 149.15 545.03 T
(xamine the deri) 390.63 545.03 T
(v) 464.98 545.03 T
(ation rela-) 470.68 545.03 T
(tionships.) 121.9 531.03 T
(5.) 107.73 511.03 T
(Do not for) 121.9 511.03 T
(get to de\336ne the method ne) 171.68 511.03 T
(w_class::pdu_len\050\051 which returns the real-) 301.7 511.03 T
(w) 121.9 497.03 T
(orld size of a data object.) 130.44 497.03 T
4 F
(A) 107.73 471.03 T
(TTENTION) 114.61 471.03 T
0 F
(If a data object is not created via the ne) 107.73 457.03 T
(w operator) 295.71 457.03 T
(, it cannot be sent to other netw) 346.88 457.03 T
(ork) 497.4 457.03 T
(objects. Additionally) 107.73 443.03 T
(, the type \336eld of the data object is not initialized automatically) 207.62 443.03 T
(,) 510.15 443.03 T
(since this normally should not be done by the constructor \050otherwise it w) 107.73 429.03 T
(ould be) 457.58 429.03 T
(changed se) 107.73 415.03 T
(v) 160.41 415.03 T
(eral times during calling all constructors of the object and its bas classes\051.) 166.23 415.03 T
(F) 107.73 401.03 T
(or objects created via ne) 114.22 401.03 T
(w) 230.55 401.03 T
(, the type \336eld is initialised once by the memory allocation) 238.43 401.03 T
(routine, and then ne) 107.73 387.03 T
(v) 202.74 387.03 T
(er ag) 208.56 387.03 T
(ain.) 232.15 387.03 T
1 14 Q
(6.2  Run-T) 107.73 353.7 T
(ime Data T) 171.65 353.7 T
(ype Checking) 237.49 353.7 T
0 12 Q
-0.16 (The run-time data type check is performed by the methods typecheck\050\051, typecheck_i\050\051,) 107.73 327.03 P
(and typequery\050\051 which are pro) 107.73 313.03 T
(vided by the generic class ino \050see Section) 252.83 313.03 T
(7.5 on) 459.46 313.03 T
(page) 107.73 299.03 T
(19\051. During initialisation of the simulator) 133.38 299.03 T
(, an inte) 330.9 299.03 T
(ger table re\337ecting the deri) 369.05 299.03 T
(v) 498.05 299.03 T
(a-) 503.75 299.03 T
(tion relations is computed. The type check methods then perform a simple lookup in) 107.73 285.03 T
(this table.) 107.73 271.03 T
1 14 Q
(6.3  Embedding of Data Objects) 107.73 237.7 T
0 12 Q
(Certain netw) 107.73 211.03 T
(ork objects ha) 169.26 211.03 T
(v) 236.34 211.03 T
(e to encapsulate data objects, e.g. to se) 242.16 211.03 T
(gment them, to) 427.27 211.03 T
(transport them in o) 107.73 197.03 T
(wn data objects, and to reconstruct them at the recei) 198.42 197.03 T
(v) 447.4 197.03 T
(er end of a) 453.22 197.03 T
-0.19 (peer) 107.73 183.03 P
-0.19 (-to-peer connection. T) 128.14 183.03 P
-0.19 (o or) 233.78 183.03 P
-0.19 (g) 252.37 183.03 P
-0.19 (anize this process transparently) 258.31 183.03 P
-0.19 (, the follo) 407.27 183.03 P
-0.19 (wing interf) 452.93 183.03 P
-0.19 (ace) 505.62 183.03 P
(has been de\336ned for class data:) 107.73 169.03 T
2 F
(class data {) 107.73 143.03 T
(data *embedded; // \324hook\325 for other data objects) 141.74 129.03 T
(data\050\051) 141.74 115.03 T
({) 141.74 101.03 T
(embedded = NULL; }) 170.09 101.03 T
(virtual ~data\050\051) 141.74 87.03 T
(// delete possibly embedded data objects) 170.09 73.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 16
%%Page: "15" 17
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(15) 516.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
({) 141.74 763.03 T
(if \050embedded\051 delete embedded; }) 170.09 763.03 T
(virtual size_t pdu_len\050\051 { return xyz; }) 141.74 749.03 T
(// return the \322real-world\323 size of the object) 170.09 735.03 T
(};) 107.73 721.03 T
0 F
(A data object which shall be transported via another object class is mounted into the) 107.73 695.03 T
2 F
-0.46 (embeded) 107.73 681.03 P
0 F
-0.19 ( pointer of one of the lo) 158.13 681.03 P
-0.19 (wer) 269.99 681.03 P
-0.19 (-layer data objects \050e.g. the last cell of the stream) 287.74 681.03 P
(of AAL 5 cells representing a frame\051. If the critical lo) 107.73 667.03 T
(wer) 365.02 667.03 T
(-layer data item is lost and) 382.77 667.03 T
(therefore deleted in the netw) 107.73 653.03 T
(ork, then the higher) 244.9 653.03 T
(-layer object is deleted automatically) 338.64 653.03 T
(\050) 107.73 639.03 T
2 F
(embedded) 111.72 639.03 T
0 F
( is non-NULL, so a) 169.32 639.03 T
2 F
(delete) 265.31 639.03 T
0 F
( is performed\051. Initially) 308.51 639.03 T
(, the) 419.71 639.03 T
2 F
(embedded) 443.38 639.03 T
0 F
-0.41 (pointer is set to NULL by the constructor of class) 107.73 625.03 P
2 F
-0.99 (data) 344.23 625.03 P
0 F
-0.41 (. The method) 373.03 625.03 P
2 F
-0.99 (pdu_len\050\051) 438.45 625.03 P
0 F
-0.41 ( has) 503.25 625.03 P
-0.23 (to return the \322real-w) 107.73 611.03 P
-0.23 (orld\323 size of the object in bytes. This allo) 204.55 611.03 P
-0.23 (ws a lo) 400.71 611.03 P
-0.23 (wer) 433.95 611.03 P
-0.23 (-layer netw) 451.69 611.03 P
-0.23 (ork) 505.65 611.03 P
(object to \336gure out, ho) 107.73 597.03 T
(w man) 216.42 597.03 T
(y lo) 248.57 597.03 T
(wer) 266.61 597.03 T
(-layer data objects ha) 284.36 597.03 T
(v) 386.42 597.03 T
(e to be sent.) 392.23 597.03 T
-0.24 (When a recei) 107.73 571.03 P
-0.24 (ving netw) 170.24 571.03 P
-0.24 (ork object e) 217.54 571.03 P
-0.24 (xpects a mounted data object, it should test) 273.52 571.03 P
2 F
-0.59 (embed-) 481.22 571.03 P
(ded) 107.73 557.03 T
0 F
( on non-NULL before it passes the pointer to a successor) 129.33 557.03 T
(.) 401.94 557.03 T
1 F
(Important) 107.73 543.03 T
0 F
(:) 161.05 543.03 T
(It is essential that the) 107.73 529.03 T
2 F
(embedded) 212.05 529.03 T
0 F
( pointer is reset to NULL, if the transported data) 269.65 529.03 T
(object is tak) 107.73 515.03 T
(en from the lo) 165.6 515.03 T
(wer) 232.96 515.03 T
(-layer data object. Otherwise, the higher) 250.71 515.03 T
(-layer object is) 443.41 515.03 T
(deleted twice: at the recei) 107.73 501.03 T
(v) 230.05 501.03 T
(er of the object and together with the lateron deleted lo) 235.88 501.03 T
(wer) 498.85 501.03 T
(-) 516.6 501.03 T
(layer object.) 107.73 487.03 T
(/) 107.73 461.03 T
2 F
(/ data *pd contains the lower-layer object) 111.06 461.03 T
(if \050pd->embedded\051) 107.73 447.03 T
({) 107.73 433.03 T
(// extract and forward higher-layer object) 141.74 433.03 T
(suc->rec\050pd->embedded, shand\051;) 141.74 419.03 T
(pd->embedded = NULL;) 141.74 405.03 T
(// !! important !!) 285.74 405.03 T
(}) 107.73 391.03 T
(else) 107.73 377.03 T
(// error message: we expected sth embedded) 141.74 377.03 T
0 F
(F) 107.73 351.03 T
(or an e) 114.22 351.03 T
(xample, see src/tcpip/aal5send.c and src/tcpip/aal5rec.c.) 146.69 351.03 T
(If a data item has to be duplicated for some reason, the method clone\050\051 should help.) 107.73 337.03 T
2 F
(data *p2;) 107.73 311.03 T
(// p1 comes from somewhere) 255.13 311.03 T
(p2 = p1->clone\050\051;) 107.73 297.03 T
-0.54 (// p1 returns a new object with a copy) 255.13 297.03 P
(// of itself. We don\325t need to know) 255.13 283.03 T
(// the class.) 255.13 269.03 T
1 14 Q
(6.4  Start-Stop Pr) 107.73 235.7 T
(otocol) 212.46 235.7 T
0 12 Q
(T) 107.73 209.03 T
(o realize a loss free transmission of data objects, e.g. between objects implementing) 114.1 209.03 T
(higher layer protocols, the Start-Stop protocol has been de\336ned.) 107.73 195.03 T
3 F
(\245) 107.73 175.03 T
0 F
-0.14 (In case the rec\050\051-method of the data recei) 121.9 175.03 P
-0.14 (v) 317.57 175.03 P
-0.14 (er returns StopSend, the data sender must) 323.39 175.03 P
(not continue to send.) 121.9 161.03 T
3 F
(\245) 107.73 141.03 T
0 F
(Data items sent during the stop state of the data sender are dropped by the data) 121.9 141.03 T
(recei) 121.9 127.03 T
(v) 144.92 127.03 T
(er) 150.74 127.03 T
(, and rec\050\051 ag) 159.58 127.03 T
(ain returns StopSend.) 222.82 127.03 T
3 F
(\245) 107.73 107.03 T
0 F
(The stopped data sender is started ag) 121.9 107.03 T
(ain by sending him a data item on the control) 298.47 107.03 T
(input.) 121.9 93.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 17
%%Page: "16" 18
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(16) 516.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(\245) 107.73 763.03 T
0 F
-0.27 (The data recei) 121.9 763.03 P
-0.27 (v) 189.02 763.03 P
-0.27 (er may send the start data item in the same slot when b) 194.84 763.03 P
-0.27 (uf) 453.96 763.03 P
-0.27 (fer becomes) 463.66 763.03 P
(a) 121.9 749.03 T
(v) 126.99 749.03 T
(ailable.) 132.69 749.03 T
3 F
(\245) 107.73 729.03 T
0 F
(Upon receiption of the start signal, the data sender has to postpone sending, if data) 121.9 729.03 T
-0.16 (ha) 121.9 715.03 P
-0.16 (v) 132.99 715.03 P
-0.16 (e been send during the current time slot \050this is possible!\051. The throughput is not) 138.81 715.03 P
(decreased, if this is ensured by a general delay by one time slot.) 121.9 701.03 T
3 F
(\245) 107.73 681.03 T
0 F
(The data sender starts in the state of sending allo) 121.9 681.03 T
(wed.) 355.23 681.03 T
-0.05 (This basic v) 107.73 655.03 P
-0.05 (ersion has been e) 165.44 655.03 P
-0.05 (xtended for future usage together with higher) 247.42 655.03 P
-0.05 (-layer proto-) 464.16 655.03 P
(cols:) 107.73 641.03 T
3 F
(\245) 107.73 621.03 T
0 F
(ContSend is de\336ned by -2.) 121.9 621.03 T
3 F
(\245) 107.73 601.03 T
0 F
(StopSend equals -1.) 121.9 601.03 T
3 F
(\245) 107.73 581.03 T
0 F
-0.21 (All other v) 121.9 581.03 P
-0.21 (alues \050only >= 0\051 ha) 173.18 581.03 P
-0.21 (v) 268.96 581.03 P
-0.21 (e the follo) 274.78 581.03 P
-0.21 (wing meaning: W) 322.72 581.03 P
-0.21 (e must stop to send, and) 407.34 581.03 P
4 F
-0.29 (lo) 121.9 567.03 P
-0.29 (gically) 131.12 567.03 P
0 F
-0.29 ( a part of the data item has been rejected. This means, that the) 163.78 567.03 P
4 F
-0.29 (physical) 459.01 567.03 P
0 F
-0.29 ( data) 499 567.03 P
-0.24 (object remains at the recei) 121.9 553.03 P
-0.24 (v) 246.6 553.03 P
-0.24 (er) 252.43 553.03 P
-0.24 (, b) 261.27 553.03 P
-0.24 (ut the recei) 272.79 553.03 P
-0.24 (v) 325.33 553.03 P
-0.24 (er has only accepted the amount of asso-) 331.15 553.03 P
(ciated data gi) 121.9 539.03 T
(v) 185.58 539.03 T
(en by the return v) 191.4 539.03 T
(alue. This may include that the recei) 275.75 539.03 T
(v) 449.75 539.03 T
(er accepted) 455.57 539.03 T
(only a part of the data, or e) 121.9 525.03 T
(v) 250.9 525.03 T
(en nothing \050recRetV) 256.72 525.03 T
(al == 0\051. In case all data ha) 353.37 525.03 T
(v) 483.29 525.03 T
(e been) 489.11 525.03 T
-0.34 (accepted, b) 121.9 511.03 P
-0.34 (ut we shall stop to send, the recei) 175.3 511.03 P
-0.34 (v) 331.97 511.03 P
-0.34 (er) 337.79 511.03 P
4 F
-0.34 (must) 349.78 511.03 P
0 F
-0.34 ( return StopSend as in the basic) 372.44 511.03 P
(protocol.) 121.9 497.03 T
(Netw) 107.73 471.03 T
(ork objects which only can handle the tw) 133.6 471.03 T
(o basic v) 330.45 471.03 T
(alues ContSend and StopSend) 372.81 471.03 T
(ha) 107.73 457.03 T
(v) 118.82 457.03 T
(e to check the return v) 124.64 457.03 T
(alue of the rec\050\051 call. A utility method is pro) 231.3 457.03 T
(vided by class) 443.09 457.03 T
(ino:) 107.73 443.03 T
2 F
(   void ino::chkStartStop\050rec_typ recRetVal\051;) 126.4 443.03 T
0 F
(It e) 107.73 429.03 T
(v) 123.09 429.03 T
(aluates the gi) 128.79 429.03 T
(v) 191.81 429.03 T
(en v) 197.63 429.03 T
(alue and generates an error message in case neither ContSend) 217.66 429.03 T
(nor StopSend has been returned.) 107.73 415.03 T
(The basic protocol currently is implemented by GmdpStop, ShapCtrl, AbrSrc, and) 107.73 389.03 T
(AbrSink. Ne) 107.73 375.03 T
(xt candidates are the anticipated AAL5 and the TCP/IP implementations.) 168.21 375.03 T
1 16 Q
(7.0  Generic Netw) 107.73 334.36 T
(ork Object Classes) 229.31 334.36 T
0 12 Q
-0.17 (There are three generic classes which hide details of connection establishment more or) 107.73 307.03 P
(less completely) 107.73 293.03 T
(.) 181.27 293.03 T
3 F
(\245) 107.73 273.03 T
2 F
(class ino: public root) 121.9 273.03 T
0 F
(Netw) 121.9 259.03 T
(ork object with arbitrarily man) 147.77 259.03 T
(y \050also zero\051 inputs. Is not used directly) 294.9 259.03 T
(, b) 484.1 259.03 T
(ut is) 495.86 259.03 T
(the base class of) 121.9 245.03 T
2 F
(in1out) 203.21 245.03 T
0 F
( and) 246.41 245.03 T
2 F
(inxout) 269.74 245.03 T
3 F
(\245) 107.73 225.03 T
2 F
(class in1out: public ino) 121.9 225.03 T
0 F
(Netw) 121.9 211.03 T
(ork object with inputs and at most one output.) 147.77 211.03 T
3 F
(\245) 107.73 191.03 T
2 F
(class inxout: public ino) 121.9 191.03 T
0 F
(Netw) 121.9 177.03 T
(ork object with inputs and arbitrarily man) 147.77 177.03 T
(y outputs.) 347.57 177.03 T
(The) 107.73 151.03 T
(y pro) 126.21 151.03 T
(vide the follo) 151.02 151.03 T
(wing services:) 214.72 151.03 T
3 F
(\245) 107.73 131.03 T
0 F
(management of inputs and outputs, parsing of output names) 121.9 131.03 T
3 F
(\245) 107.73 111.03 T
0 F
(methods for connection establishment \050connect\050\051 and handle\050\051\051) 121.9 111.03 T
3 F
(\245) 107.73 91.03 T
0 F
(e) 121.9 91.03 T
(xport\050\051-method for reading a uni) 127.05 91.03 T
(v) 282.71 91.03 T
(ersal counter) 288.53 91.03 T
3 F
(\245) 107.73 71.03 T
0 F
(con) 121.9 71.03 T
(v) 138.75 71.03 T
(enience functions to apply in e) 144.57 71.03 T
(xport\050\051) 291.36 71.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 18
%%Page: "17" 19
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(17) 516.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(\245) 107.73 763.03 T
0 F
(command\050\051-method for resetting the counter) 121.9 763.03 T
3 F
(\245) 107.73 743.03 T
0 F
(methods for run-time data type checking) 121.9 743.03 T
3 F
(\245) 107.73 723.03 T
0 F
(pro) 121.9 723.03 T
(vision and initialisation of an e) 137.72 723.03 T
(v) 285.75 723.03 T
(ent structure) 291.57 723.03 T
1 14 Q
(7.1  De\336nition of Inputs) 107.73 689.7 T
0 12 Q
(The three follo) 107.73 663.03 T
(wing methods can be called from init\050\051 or addpars\050\051, the can be used) 178.74 663.03 T
-0.03 (arbitrarily often, and mix) 107.73 649.03 P
-0.03 (ed together with calls to de\336ne outputs. If none of the input\050\051-) 228.11 649.03 P
(methods is called, then the netw) 107.73 635.03 T
(ork object has no inputs.) 261.59 635.03 T
2 F
(void ino::stdinp\050void\051;) 107.73 609.03 T
0 F
-0.38 (De\336nition of an input whichs name equals the netw) 121.9 589.03 P
-0.38 (ork object\325) 366.03 589.03 P
-0.38 (s name. The input k) 417.31 589.03 P
-0.38 (e) 510.65 589.03 P
-0.38 (y) 515.8 589.03 P
(number lateron returned by handle\050\051 is 0.) 121.9 575.03 T
2 F
(void ino::input\050char *ext, int key\051;) 107.73 549.03 T
0 F
(An input with the name) 121.9 529.03 T
2 F
(\324objName\325->\325*ext\325) 238.23 529.03 T
0 F
(. The input k) 360.63 529.03 T
(e) 421.84 529.03 T
(y number is k) 426.99 529.03 T
(e) 492.53 529.03 T
(y) 497.68 529.03 T
(. In) 502.9 529.03 T
(case) 121.9 515.03 T
2 F
(ext == NULL) 145.55 515.03 T
0 F
(,  the input name equals the object name.) 224.75 515.03 T
2 F
(void ino::inputs\050char *ext, int ninp, int displ\051;) 107.73 489.03 T
0 F
(De\336ne a set of ninp inputs. The inputs ha) 121.9 469.03 T
(v) 319.31 469.03 T
(e the names) 325.13 469.03 T
2 F
-0.34 (\324objName\325->\325*ext\325[no]) 121.9 455.03 P
0 F
-0.14 (, where no is ranging from 1 to ninp. The input k) 273.1 455.03 P
-0.14 (e) 505.74 455.03 P
-0.14 (ys) 510.89 455.03 P
(are \050no + displ\051. If e.g. the \336rst input shall ha) 121.9 441.03 T
(v) 336.74 441.03 T
(e the k) 342.56 441.03 T
(e) 374.43 441.03 T
(y 0, then displ is -1.) 379.58 441.03 T
(Handle\050\051 lateron generates error messages, when input names dif) 107.73 415.03 T
(ferent from the) 419.01 415.03 T
(de\336ned ones are requested. Multiple connections also cause error messages, inputs) 107.73 401.03 T
(staying unconnected are not reported \050the) 107.73 387.03 T
(y do not cause errors\051.) 306.49 387.03 T
1 14 Q
(7.2  De\336nition of Outputs) 107.73 353.7 T
0 12 Q
(The methods can be called from init\050\051 or addpars\050\051, the) 107.73 327.03 T
(y can be mix) 370.81 327.03 T
(ed with input\050\051-) 432.29 327.03 T
(calls. The) 107.73 313.03 T
(y can be called arbitrarily often \050e) 154.2 313.03 T
(xception: in1out::output\050\051 only once\051.) 316.64 313.03 T
2 F
(void in1out::output\050char *keyw\051;) 107.73 287.03 T
0 F
-0.23 (De\336nition of an output. The output name is read from the input te) 121.9 267.03 P
-0.23 (xt. In case k) 433.9 267.03 P
-0.23 (e) 491.07 267.03 P
-0.23 (yw is) 496.22 267.03 P
-0.17 (not the NULL pointer) 121.9 253.03 P
-0.17 (, the k) 225.91 253.03 P
-0.17 (e) 255.12 253.03 P
-0.17 (yw) 260.27 253.03 P
-0.17 (ord follo) 274.82 253.03 P
-0.17 (wed by a \324=\325 sign has to preceed the output) 316.02 253.03 P
(name. After connection establishment by connect\050\051, the object element) 121.9 239.03 T
2 F
(root) 464.16 239.03 T
(*suc) 121.9 225.03 T
0 F
( is initialized with the pointer to the ne) 150.7 225.03 T
(xt netw) 335.85 225.03 T
(ork object,) 371.39 225.03 T
2 F
(int shand) 425.72 225.03 T
0 F
( con-) 490.52 225.03 T
(tains the input k) 121.9 211.03 T
(e) 198.78 211.03 T
(y number associated to the wished input. In case the output\050\051-) 203.93 211.03 T
(method is not called, the netw) 121.9 197.03 T
(ork object has no output, and suc remains NULL.) 265.77 197.03 T
2 F
(void inxout::output\050char *keyw, int idx\051;) 107.73 171.03 T
0 F
(Lik) 121.9 151.03 T
(e in1out::output\050\051. Additionally) 138.45 151.03 T
(, the inde) 288.68 151.03 T
(x which the successor shall ha) 332.82 151.03 T
(v) 477.56 151.03 T
(e in the) 483.38 151.03 T
-0.24 (arrays root sucs[] and int shands[], is speci\336ed in idx. T) 121.9 137.03 P
-0.24 (o pass lateron data on output) 385.19 137.03 P
(idx:) 121.9 123.03 T
2 F
(sucs[idx]->rec\050pdata, shands[idx]\051) 143.57 123.03 T
0 F
(.) 388.37 123.03 T
2 F
(void inxout::outputs\050char *keyw, int nout, int displ\051;) 107.73 97.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 19
%%Page: "18" 20
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(18) 516.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(De\336ne a set of outputs. If k) 121.9 763.03 T
(e) 252.76 763.03 T
(yw != NULL, the k) 257.91 763.03 T
(e) 350.87 763.03 T
(yw) 356.02 763.03 T
(ord and a \324=\325 are e) 370.56 763.03 T
(xpected as) 458.78 763.03 T
(introduction. The output indices in sucs[] and shands[] are \050no + displ\051, where no) 121.9 749.03 T
-0.12 (ranges from 1 to nout \050e) 121.9 735.03 P
-0.12 (xample: to generate indices 0 ... \050nout-1\051, specify displ=-1\051.) 236.77 735.03 P
(The output names are e) 121.9 721.03 T
(xpected according to one of three possibilities:) 233.69 721.03 T
2 F
(\324\050\324 variable \324:\325 nameTemplateContainingVariable \324\051\325) 121.9 707.03 T
0 F
(The v) 121.9 693.03 T
(ariable has to be declared in adv) 149.26 693.03 T
(ance and is counted from 1 to nout to obtain) 303.58 693.03 T
(the names.) 121.9 679.03 T
2 F
(\324\050\324 variable \324=\325 lo \324to\325 up \324:\325 Template \324,\325 ... \324\051\325) 121.9 661.03 T
0 F
(The v) 121.9 643.03 T
(ariable has to be declared in adv) 149.26 643.03 T
(ance, and a number of ranges with dif) 303.58 643.03 T
(ferent) 484.56 643.03 T
(name templates can be speci\336ed. Ranges can be abbre) 121.9 629.03 T
(viated. See User\325) 381.2 629.03 T
(s Manual,) 462.84 629.03 T
(section about Demultiple) 121.9 615.03 T
(x) 242.38 615.03 T
(er) 248.2 615.03 T
(.) 256.86 615.03 T
2 F
(output1 \324,\325 ... \324,\325 outputNout) 121.9 601.03 T
0 F
(The names are listed completely) 121.9 587.03 T
(.) 276.42 587.03 T
1 14 Q
(7.3  Command\050\051 Method, Ev) 107.73 553.7 T
(ent Structur) 277.91 553.7 T
(e) 351.14 553.7 T
2 12 Q
(unsigned ino::counter;) 107.73 527.03 T
(int ino::command\050char *, tok_typ *\051;) 107.73 513.03 T
0 F
(The class ino contains a counter which is initialized with zero by the constructor) 121.9 493.03 T
(.) 506.85 493.03 T
-0.09 (W) 121.9 479.03 P
-0.09 (ith the command objName->ResCount, the counter can be reset \050implemented by) 132.75 479.03 P
(command\050\051\051. Reading counter is pro) 121.9 465.03 T
(vided by the e) 296.02 465.03 T
(xport\050\051-method \050see ne) 363.5 465.03 T
(xt\051.) 473.28 465.03 T
2 F
(even ino::std_evt;) 107.73 439.03 T
0 F
(This is a prede\336ned e) 121.9 419.03 T
(v) 224.25 419.03 T
(ent which is part of) 230.07 419.03 T
2 F
(ino) 325.72 419.03 T
0 F
(. The e) 347.32 419.03 T
(v) 380.01 419.03 T
(ent k) 385.83 419.03 T
(e) 409.37 419.03 T
(y number is 0.) 414.52 419.03 T
1 14 Q
(7.4  Export\050\051 Method, Con) 107.73 385.7 T
(v) 265.05 385.7 T
(enience Functions) 271.9 385.7 T
2 12 Q
(int ino::export\050exp_typ *\051;) 107.73 359.03 T
0 F
(The address of the V) 121.9 339.03 T
(ariable objName->Count is e) 220.54 339.03 T
(xported, no indices are allo) 359.44 339.03 T
(wed.) 489.45 339.03 T
(The address type is e) 121.9 325.03 T
(xp_typ::IntScalar \050see \322special.h\323\051.) 222.36 325.03 T
(The follo) 107.73 299.03 T
(wing methods allo) 151.76 299.03 T
(w an uncomplicated e) 240.12 299.03 T
(xport of inte) 344.92 299.03 T
(ger and double scalars) 404.07 299.03 T
(and one- and tw) 107.73 285.03 T
(o-dimensional arrays.) 184.59 285.03 T
(F) 107.73 271.03 T
(or application e) 114.22 271.03 T
(xamples, see e.g. mux::e) 188.69 271.03 T
(xport\050\051 in the source code \336le \322mux.c\323.) 306.49 271.03 T
2 F
(int ino::intScalar\050exp_typ *msg, char *nam, int *ptr\051;) 107.73 245.03 T
(int ino::doubleScalar\050exp_typ *msg, char *nam,) 107.73 231.03 T
(                      double *ptr\051;) 107.73 217.03 T
0 F
-0.26 (In case the v) 121.9 197.03 P
-0.26 (ariable name gi) 181.12 197.03 P
-0.26 (v) 254.28 197.03 P
-0.26 (en in the msg structure equals nam and no indices ha) 260.1 197.03 P
-0.26 (v) 510.53 197.03 P
-0.26 (e) 516.35 197.03 P
(been speci\336ed, the address ptr is \336lled into *msg. The address type then is \336lled) 121.9 183.03 T
-0.34 (with e) 121.9 169.03 P
-0.34 (xp_typ::IntScalar or e) 151.04 169.03 P
-0.34 (xp_typ::DoubleScalar) 254.82 169.03 P
-0.34 (, and the method returns TR) 359.67 169.03 P
-0.34 (UE. If) 492.12 169.03 P
(the conditions are not met, F) 121.9 155.03 T
(ALSE is returned.) 258.34 155.03 T
2 F
(int ino::intArray1\050exp_typ *msg, char *nam,) 107.73 129.03 T
(                   int *ptr, int dim, int displ\051;) 107.73 115.03 T
(int ino::doubleArray1\050exp_typ *msg, char *nam,) 107.73 101.03 T
(                   double *ptr, int dim, int displ\051;) 107.73 87.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 20
%%Page: "19" 21
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(19) 516.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(Lik) 121.9 763.03 T
(e intScalar\050\051 / doubleScalar\050\051, b) 138.45 763.03 T
(ut additionally the length of the array is noted in) 289.17 763.03 T
-0.28 (the message. The v) 121.9 749.03 P
-0.28 (alue displ speci\336es the dif) 212.74 749.03 P
-0.28 (ferenc between logical v) 335.97 749.03 P
-0.28 (alue and inde) 452.46 749.03 P
-0.28 (x) 515.7 749.03 P
-0.41 (in the array) 121.9 735.03 P
-0.41 (. Shall an array e.g. possess the logical indices 1 ... dim \050in the simulation) 174.95 735.03 P
-0.12 (input \336le or on a measurent display\051, then displ has to be set to 1. The address types) 121.9 721.03 P
(\336lled into the message are e) 121.9 707.03 T
(xp_typ::IntArray1 or e) 255.36 707.03 T
(xp_typ::DoubleArray1.) 363.83 707.03 T
2 F
(int ino::intArray2\050exp_typ *msg, char *nam,) 107.73 681.03 T
(                   int **ptr, int dim1, int displ1,) 107.73 667.03 T
(                   int dim2, int displ2\051;) 107.73 653.03 T
(int ino::doubleArray2\050exp_typ *msg, char *nam,) 107.73 639.03 T
(                   double **ptr, int dim1, int displ1,) 107.73 625.03 T
(                   int dim2, int displ2\051;) 107.73 611.03 T
0 F
(These tw) 121.9 591.03 T
(o methods allo) 165.44 591.03 T
(w to e) 235.8 591.03 T
(xport tw) 264.95 591.03 T
(o-dimensional arrays of inte) 305.16 591.03 T
(ger and double) 439.96 591.03 T
(v) 121.9 577.03 T
(alues. F) 127.6 577.03 T
(or both dimensions,) 164.75 577.03 T
2 F
(dim) 262.76 577.03 T
0 F
( and) 284.36 577.03 T
2 F
(displ) 307.68 577.03 T
0 F
( ha) 343.68 577.03 T
(v) 357.77 577.03 T
(e to be gi) 363.59 577.03 T
(v) 407.62 577.03 T
(en \050same meaning as) 413.44 577.03 T
(for the one-dimensional v) 121.9 563.03 T
(ersions\051. F) 245.37 563.03 T
(or an application, see \336le \324src/misc/meas3.c\325.) 295.85 563.03 T
1 14 Q
(7.5  Run-T) 107.73 529.7 T
(ime Data T) 171.65 529.7 T
(ype Checking) 237.49 529.7 T
0 12 Q
-0.26 (Netw) 107.73 503.03 P
-0.26 (ork objects e) 133.6 503.03 P
-0.26 (xpecting certain data object types from their preceeding objects ha) 194.21 503.03 P
-0.26 (v) 510.53 503.03 P
-0.26 (e) 516.35 503.03 P
-0.13 (to check the actual type of arri) 107.73 489.03 P
-0.13 (ving data items. This is because the input \336le syntax can) 252.58 489.03 P
(not check whether objects which incompatible data object types are connected. The) 107.73 475.03 T
(follo) 107.73 461.03 T
(wing inline-methods \050de\336ned in \322ino.h\323\051 are pro) 130.1 461.03 T
(vided.) 362.21 461.03 T
2 F
(void ino::typecheck_i\050data *pd, dat_typ typ, int key\051;) 107.73 435.03 T
0 F
(Using a table created during simulator initialisation, it is determined whether the) 121.9 415.03 T
-0.39 (incomming data item is of the requested type or of a deri) 121.9 401.03 P
-0.39 (v) 389.62 401.03 P
-0.39 (ed type. If neither of them,) 395.44 401.03 P
(then an error message is generated. K) 121.9 387.03 T
(e) 301.88 387.03 T
(y is the input k) 307.02 387.03 T
(e) 378.24 387.03 T
(y number which has been) 383.39 387.03 T
(passed to the rec\050\051-method. It is used to deri) 121.9 373.03 T
(v) 332.56 373.03 T
(e input name and name of preceeding) 338.38 373.03 T
(object for an error message.) 121.9 359.03 T
2 F
(void ino::typecheck\050data *pd, dat_typ typ\051;) 107.73 333.03 T
0 F
(Simpler v) 121.9 313.03 T
(ersion of typecheck_i\050\051. Can be used for netw) 168.72 313.03 T
(ork objects only possessing) 387.88 313.03 T
(one input. If the method is used for objects with more than one input, then the type) 121.9 299.03 T
(check is perfomed accuratly) 121.9 285.03 T
(, b) 256.07 285.03 T
(ut an error message will probably contain the wrong) 267.83 285.03 T
(input and preceeding object name.) 121.9 271.03 T
2 F
(int ino::typequery\050data *pd, dat_typ typ\051;) 107.73 245.03 T
0 F
(This is a \322soft\323 v) 121.9 225.03 T
(ersion of typecheck\050\051. The method returns TR) 203.04 225.03 T
(UE if the data item) 422.85 225.03 T
(has the right type, F) 121.9 211.03 T
(ALSE otherwise. No error message is generated. Using this) 216.68 211.03 T
(method, dif) 121.9 197.03 T
(ferent data types can be distinguished without additional \337ags.) 176.93 197.03 T
1 14 Q
(7.6  Connection Establishment) 107.73 163.7 T
0 12 Q
(These methods are called by the k) 107.73 137.03 T
(ernel prior to the \336rst simulation run.) 270.9 137.03 T
2 F
(void in1out::connect\050void\051;) 107.73 111.03 T
(void inxout::connect\050void\051;) 107.73 97.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 21
%%Page: "20" 22
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(20) 516.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(The information obtained by output\050\051-calls is used to connect to the successors.) 121.9 763.03 T
(After connection establishment, the follo) 121.9 749.03 T
(wing data object members \050of the o) 317.91 749.03 T
(wn) 487.58 749.03 T
(object\051 are initialized:) 121.9 735.03 T
184.91 719.83 121.9 719.83 2 L
V
0.6 H
0 Z
N
(Class in1out:) 121.9 721.03 T
2 F
(root *suc; // pointer to the successor) 121.9 707.03 T
(int shand; // input key value to pass together with) 121.9 693.03 T
(           // every data item) 121.9 679.03 T
184.91 663.83 121.9 663.83 2 L
V
N
0 F
(Class inxout:) 121.9 665.03 T
(Similar) 121.9 651.03 T
(, b) 156.76 651.03 T
(ut the v) 168.52 651.03 T
(alues no) 204.22 651.03 T
(w are arrays. The array length is deri) 243.58 651.03 T
(v) 419.88 651.03 T
(ed from the lar) 425.7 651.03 T
(gest) 496.47 651.03 T
(inde) 121.9 637.03 T
(x whished by an output\050\051-call.) 142.38 637.03 T
2 F
(root **sucs;) 121.9 623.03 T
(int *shands;) 121.9 609.03 T
1 16 Q
(8.0  Ev) 107.73 568.36 T
(ent Scheduler) 154.24 568.36 T
0 12 Q
(The e) 107.73 541.03 T
(v) 134.41 541.03 T
(ent scheduler di) 140.24 541.03 T
(vides each time slot into an early and a late phase. Therefore,) 215.92 541.03 T
-0.36 (problems arising from simultaneity can be solv) 107.73 527.03 P
-0.36 (ed inside of the netw) 331.39 527.03 P
-0.36 (ork objects without) 429.83 527.03 P
-0.24 (making the scheduler lar) 107.73 513.03 P
-0.24 (ge and slo) 225.1 513.03 P
-0.24 (w \050e) 272.98 513.03 P
-0.24 (xample: \322mux.c\323\051. Netw) 293.55 513.03 P
-0.24 (ork objects can re) 410.92 513.03 P
-0.24 (gister) 494.99 513.03 P
(for single acti) 107.73 499.03 T
(v) 173.41 499.03 T
(ation upon e) 179.12 499.03 T
(xpiry of a specifeid time \050\322e) 238.26 499.03 T
(v) 372.93 499.03 T
(ent triggered\323\051, or the) 378.75 499.03 T
(y can) 482.53 499.03 T
-0.06 (re) 107.73 485.03 P
-0.06 (gister for acti) 116.87 485.03 P
-0.06 (v) 180.43 485.03 P
-0.06 (ation during each time slot \050\322time triggered\323\051. During each slot phase,) 186.13 485.03 P
(\336rst the e) 107.73 471.03 T
(v) 152.09 471.03 T
(ent triggered, and then the time triggered e) 157.91 471.03 T
(v) 362.23 471.03 T
(ents are acti) 368.05 471.03 T
(v) 425.07 471.03 T
(ated. The global) 430.77 471.03 T
(v) 107.73 457.03 T
(ariable) 113.43 457.03 T
2 F
(int TimeType) 149.08 457.03 T
0 F
( speci\336es the current slot phase, v) 235.48 457.03 T
(alues are EARL) 396.82 457.03 T
(Y and) 472.26 457.03 T
(LA) 107.73 443.03 T
(TE. The global v) 122.39 443.03 T
(ariable) 203.41 443.03 T
2 F
(tim_typ SimTime) 239.07 443.03 T
0 F
( displays the current time.) 347.07 443.03 T
(T) 107.73 417.03 T
(o a) 114.1 417.03 T
(v) 128.19 417.03 T
(oid repeated allocations and deallocations of e) 133.95 417.03 T
(v) 355.6 417.03 T
(ent management structures in the) 361.42 417.03 T
(k) 107.73 403.03 T
(ernel, the e) 113.61 403.03 T
(v) 166.29 403.03 T
(ent structures are directly associated to the netw) 172.11 403.03 T
(ork objects. Fix e) 402.27 403.03 T
(v) 485.29 403.03 T
(ent) 491.11 403.03 T
-0.06 (entries lik) 107.73 389.03 P
-0.06 (e the pointer to the netw) 155.21 389.03 P
-0.06 (ork object and the e) 271.09 389.03 P
-0.06 (v) 365.19 389.03 P
-0.06 (ent k) 371.01 389.03 P
-0.06 (e) 394.49 389.03 P
-0.06 (y \050to distinguish dif) 399.64 389.03 P
-0.06 (ferent) 493.5 389.03 P
(timers set by an object\051 are initialized once at netw) 107.73 375.03 T
(ork object creation. When re) 351.89 375.03 T
(gister-) 488.67 375.03 T
(ing at the scheduler) 107.73 361.03 T
(, a netw) 200.9 361.03 T
(ork object passes the address of the e) 238.43 361.03 T
(v) 415.76 361.03 T
(ent structure to the) 421.58 361.03 T
-0.01 (scheduler) 107.73 347.03 P
-0.01 (. The latter one directly uses the structure in the e) 153.05 347.03 P
-0.01 (v) 389.65 347.03 P
-0.01 (ent lists. The consequence) 395.47 347.03 P
(is that an e) 107.73 333.03 T
(v) 159.09 333.03 T
(ent structure must not be reused for starting another timer prior to) 164.91 333.03 T
(1.) 107.73 313.03 T
(Ev) 121.9 313.03 T
(ent acti) 135.05 313.03 T
(v) 169.74 313.03 T
(ation by the k) 175.44 313.03 T
(ernel. The object method called by the k) 240.99 313.03 T
(ernel \050early\050\051 or) 434.16 313.03 T
(late\050\051\051, ho) 121.9 299.03 T
(we) 168.92 299.03 T
(v) 182.61 299.03 T
(er) 188.43 299.03 T
(, can reuse the e) 197.27 299.03 T
(v) 273.94 299.03 T
(ent immediately for e ne) 279.76 299.03 T
(w re) 396.77 299.03 T
(gistration. Or:) 417.58 299.03 T
(2.) 107.73 279.03 T
(Deleting the re) 121.9 279.03 T
(gistration via unalarme\050\051 / unalarml\050\051.) 193.04 279.03 T
(F) 107.73 253.03 T
(or the most applications, this will not cause an) 114.22 253.03 T
(y incon) 336.36 253.03 T
(v) 371.55 253.03 T
(enience: The) 377.37 253.03 T
(y use the scheme:) 438.83 253.03 T
(1.) 107.73 233.03 T
(Re) 121.9 233.03 T
(gister for acti) 135.05 233.03 T
(v) 198.74 233.03 T
(ation) 204.44 233.03 T
(2.) 107.73 213.03 T
(Return control) 121.9 213.03 T
(3.) 107.73 193.03 T
(Acti) 121.9 193.03 T
(v) 142.26 193.03 T
(ation by K) 147.96 193.03 T
(ernel, do something \050send a cell ...\051) 198.33 193.03 T
(4.) 107.73 173.03 T
(Re) 121.9 173.03 T
(gister ag) 135.05 173.03 T
(ain for acti) 175.98 173.03 T
(v) 227.67 173.03 T
(ation \050according to an IA) 233.37 173.03 T
(T ...\051) 352.67 173.03 T
-0.45 (If more than one timer has to be used \050for protocols, for ABR, for combination between) 107.73 147.03 P
-0.44 (e) 107.73 133.03 P
-0.44 (v) 112.75 133.03 P
-0.44 (ent and time triggered processing ...\051, than the appropriate number of e) 118.57 133.03 P
-0.44 (v) 452.37 133.03 P
-0.44 (ents has to be) 458.19 133.03 P
-0.26 (part of the object. The v) 107.73 119.03 P
-0.26 (ery last possibility is: create an e) 221.53 119.03 P
-0.26 (v) 376.29 119.03 P
-0.26 (ent with operator ne) 382.11 119.03 P
-0.26 (w) 477.32 119.03 P
-0.26 (, \336ll the) 485.21 119.03 P
(object and k) 107.73 105.03 T
(e) 166.26 105.03 T
(y members, use it for re) 171.41 105.03 T
(gistration, return control; when early\050\051 / late is) 285.21 105.03 T
(called, then the pointer to the e) 107.73 91.03 T
(v) 255.74 91.03 T
(ent is passed, so you can delete it.) 261.55 91.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 22
%%Page: "21" 23
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(21) 516.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(8.1  Ev) 107.73 761.7 T
(ent T) 148.43 761.7 T
(rigger) 178.89 761.7 T
(ed Acti) 215.18 761.7 T
(v) 257.42 761.7 T
(ation) 264.27 761.7 T
2 12 Q
(void) 107.73 735.03 T
( alarme\050event *evt, tim_typ delta\051; // register for) 136.53 735.03 T
(                                        // for early phase) 107.73 721.03 T
(void) 107.73 707.03 T
( alarml\050event *evt, tim_typ delta\051; // for late phase) 136.53 707.03 T
0 F
(The netw) 107.73 681.03 T
(ork object speci\336ed by e) 152.6 681.03 T
(vt->obj is acti) 269.61 681.03 T
(v) 336.08 681.03 T
(ated at the time \050SimT) 341.77 681.03 T
(ime + delta\051.) 448.68 681.03 T
(When calling early\050\051 or late\050\051 of the object, the e) 107.73 667.03 T
(v) 340.02 667.03 T
(ent pointer e) 345.84 667.03 T
(vt is passed back. The) 405.53 667.03 T
(time dif) 107.73 653.03 T
(ference delta has to be lar) 145.1 653.03 T
(ger than 0. Otherwise the object will be acti) 267.83 653.03 T
(v) 477.16 653.03 T
(ated) 482.86 653.03 T
(ne) 107.73 639.03 T
(v) 118.75 639.03 T
(er ag) 124.57 639.03 T
(ain. There are tw) 148.17 639.03 T
(o e) 229.35 639.03 T
(xceptions, where delta may be zero:) 243.49 639.03 T
3 F
(\245) 107.73 619.03 T
0 F
-0.43 (During the early slot phase, it is possible to re) 121.9 619.03 P
-0.43 (gister for acti) 337.83 619.03 P
-0.43 (v) 400.65 619.03 P
-0.43 (ation in the late phase of) 406.35 619.03 P
(the same slot \050alarml\050..., 0\051\051.) 121.9 605.03 T
3 F
(\245) 107.73 585.03 T
0 F
(When no simulation is running, e.g. during initialisation or when perfoming a com-) 121.9 585.03 T
(mand\050\051, delta may be zero. This then means that the object will be acti) 121.9 571.03 T
(v) 459.21 571.03 T
(ated during) 464.91 571.03 T
(the \336rst time slot of the ne) 121.9 557.03 T
(xt simulation run.) 247.72 557.03 T
1 14 Q
(8.2  T) 107.73 523.7 T
(ime T) 141.31 523.7 T
(rigger) 174.88 523.7 T
(ed Acti) 211.17 523.7 T
(v) 253.41 523.7 T
(ation) 260.27 523.7 T
2 12 Q
(void eache\050event *\051; // call every early slot phase) 107.73 497.03 T
(void eachl\050event *\051; // late slot phase) 107.73 483.03 T
0 F
(The netw) 107.73 457.03 T
(ork object is acti) 152.6 457.03 T
(v) 231.95 457.03 T
(ated during each time slot.) 237.65 457.03 T
1 14 Q
(8.3  Deleting Ev) 107.73 423.7 T
(ent T) 201.7 423.7 T
(rigger) 232.16 423.7 T
(ed Acti) 268.45 423.7 T
(v) 310.68 423.7 T
(ations) 317.55 423.7 T
0 12 Q
-0.06 (An e) 107.73 397.03 P
-0.06 (v) 130.36 397.03 P
-0.06 (ent re) 136.18 397.03 P
-0.06 (gistered with alarme\050\051 / alarml\050\051 can be deleted as long as the e) 162.92 397.03 P
-0.06 (v) 463.79 397.03 P
-0.06 (ent has not) 469.61 397.03 P
(yet been acti) 107.73 383.03 T
(v) 168.07 383.03 T
(ated. Since deleting the e) 173.77 383.03 T
(v) 293.79 383.03 T
(ent requires some search operations in the) 299.61 383.03 T
(e) 107.73 369.03 T
(v) 112.75 369.03 T
(ent lists, these routines are relati) 118.57 369.03 T
(vly e) 272.92 369.03 T
(xpensi) 296.4 369.03 T
(v) 327.43 369.03 T
(e.) 333.26 369.03 T
2 F
(void unalarme\050event *\051; // when registered with alarme\050\051) 107.73 343.03 T
(void unalarml\050event *\051; // when registered with alarml\050\051) 107.73 329.03 T
1 16 Q
(9.0  P) 107.73 288.36 T
(arser Utility Routines) 145.34 288.36 T
0 12 Q
(F) 107.73 261.03 T
(or an easy e) 114.22 261.03 T
(v) 170.9 261.03 T
(aluation of netw) 176.6 261.03 T
(ork object parameters, a set of routines is pro) 254.46 261.03 T
(vided.) 470.57 261.03 T
-0.27 (These routines e) 107.73 247.03 P
-0.27 (xpect a certain input te) 185.65 247.03 P
-0.27 (xt and automatically generate error messages, if) 293.7 247.03 P
(the desired te) 107.73 233.03 T
(xt can not be found. Upon successful completion, the input \336le reading) 171.53 233.03 T
(pointer is shifted appropriately) 107.73 219.03 T
(.) 254.6 219.03 T
(The current input symbol type \050i.e. tok) 107.73 205.03 T
(en\051 al) 292.92 205.03 T
(w) 319.79 205.03 T
(ays is stored in the global v) 328.33 205.03 T
(ariable) 459.36 205.03 T
2 F
(int token;) 107.73 191.03 T
0 F
-0.41 (The tok) 107.73 177.03 P
-0.41 (en types are de\336ned in \322defs.h\323. The tok) 144.2 177.03 P
-0.41 (en attrib) 334.85 177.03 P
-0.41 (utes \050name, v) 373.87 177.03 P
-0.41 (alue ...\051 are stored) 437.08 177.03 P
(in) 107.73 163.03 T
2 F
(tok_typ tval;) 107.73 149.03 T
(void skip\050int tok\051;) 107.73 129.03 T
0 F
-0.24 (The gi) 121.9 115.03 P
-0.24 (v) 152.36 115.03 P
-0.24 (en tok) 158.18 115.03 P
-0.24 (en type is e) 187.49 115.03 P
-0.24 (xpected in the input te) 240.92 115.03 P
-0.24 (xt. It is skipped if found there. Other-) 346.44 115.03 P
(wise, a syntax error message is generated. F) 121.9 101.03 T
(or single characters lik) 332.67 101.03 T
(e \324:\325 or \324,) 441.52 101.03 T
(\325,  the) 483.33 101.03 T
-0.27 (tok) 121.9 87.03 P
-0.27 (en type equals the character v) 137.12 87.03 P
-0.27 (alue. Do not use skip\050\051 to skip strings or identi\336ers,) 277.77 87.03 P
(since dynamic copies created by the scanner are possibly not freed.) 121.9 73.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 23
%%Page: "22" 24
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(22) 516.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(char *read_id\050char *keyw\051;) 107.73 763.03 T
0 F
(An identi\336er is read from the input te) 121.9 749.03 T
(xt. In case k) 300.7 749.03 T
(e) 358.56 749.03 T
(yw != NULL, it has to be intro-) 363.71 749.03 T
(duced by the k) 121.9 735.03 T
(e) 192.1 735.03 T
(yw) 197.25 735.03 T
(ord and a \324=\325. The identi\336er may contain indices, the) 211.79 735.03 T
(y are) 464.67 735.03 T
(included into the string returned by the routine. It is check) 121.9 721.03 T
(ed, that the identi\336er is) 400.74 721.03 T
(not yet used for a netw) 121.9 707.03 T
(ork object, a v) 231.42 707.03 T
(ariable, or a macro. The string returned is a) 299.78 707.03 T
(dynamic cop) 121.9 693.03 T
(y which can be used directly for storing into the object member) 183.44 693.03 T
2 F
(name) 490.72 693.03 T
0 F
(.) 519.52 693.03 T
2 F
(char *read_suc\050char *keyw\051;) 107.73 679.03 T
0 F
(Lik) 121.9 665.03 T
(e read_id\050\051, b) 138.45 665.03 T
(ut the identi\336er can be used already) 202.52 665.03 T
(. Additionally) 372.36 665.03 T
(, the identi\336er) 438.26 665.03 T
(may contain an e) 121.9 651.03 T
(xtension with \324->\325.) 203.37 651.03 T
2 F
(int read_int\050char *keyw\051;) 107.73 637.03 T
0 F
-0.27 (An \050arbitrarily comple) 121.9 623.03 P
-0.27 (x\051 inte) 229.16 623.03 P
-0.27 (ger e) 259.71 623.03 P
-0.27 (xpression is e) 282.91 623.03 P
-0.27 (xpected. Its v) 347.52 623.03 P
-0.27 (alue is returned. K) 411 623.03 P
-0.27 (e) 498.54 623.03 P
-0.27 (yw:) 503.69 623.03 P
(see read_id\050\051.) 121.9 609.03 T
2 F
(double read_double\050char *keyw\051;) 107.73 595.03 T
0 F
-0.23 (An \050arbitrarily comple) 121.9 581.03 P
-0.23 (x\051 double e) 229.24 581.03 P
-0.23 (xpression is e) 282.59 581.03 P
-0.23 (xpected. Its v) 347.28 581.03 P
-0.23 (alue is returned. K) 410.84 581.03 P
-0.23 (e) 498.5 581.03 P
-0.23 (yw:) 503.65 581.03 P
(see read_id\050\051.) 121.9 567.03 T
2 F
(char *read_string\050char *keyw\051;) 107.73 553.03 T
0 F
(A string e) 121.9 539.03 T
(xpression is e) 169.05 539.03 T
(xpected. The return v) 234.2 539.03 T
(alue points to a dynamic cop) 336.53 539.03 T
(y which) 474.06 539.03 T
-0.42 (may be stored for internal use and should be deleted when not longer needed. K) 121.9 525.03 P
-0.42 (e) 498.69 525.03 P
-0.42 (yw:) 503.84 525.03 P
(see read_id\050\051.) 121.9 511.03 T
2 F
(char *read_word\050char *keyw\051;) 107.73 497.03 T
0 F
-0.12 (A ra) 121.9 483.03 P
-0.12 (w w) 142.59 483.03 P
-0.12 (ord \050identi\336er ...\051 is e) 162.69 483.03 P
-0.12 (xpected. The return v) 263.7 483.03 P
-0.12 (alue points to a dynamic cop) 365.69 483.03 P
-0.12 (y of) 502.65 483.03 P
-0.28 (the w) 121.9 469.03 P
-0.28 (ord read. It should be deleted when not needed an) 147.83 469.03 P
-0.28 (y longer) 383.73 469.03 P
-0.28 (. K) 422.45 469.03 P
-0.28 (e) 436.53 469.03 P
-0.28 (yw: see read_id\050\051) 441.68 469.03 P
2 F
(int test_word\050char *txt\051;) 107.73 455.03 T
0 F
(It is tested whether the gi) 121.9 441.03 T
(v) 242.58 441.03 T
(en w) 248.4 441.03 T
(ord is ne) 271.28 441.03 T
(xt to read. The w) 312.42 441.03 T
(ord is e) 393.95 441.03 T
(xpected ra) 429.1 441.03 T
(w) 478.56 441.03 T
(, not as) 486.45 441.03 T
(string. If the w) 121.9 427.03 T
(ord is found, TR) 192.44 427.03 T
(UE is returned, otherwise F) 271.29 427.03 T
(ALSE. The input te) 402.71 427.03 T
(xt) 496.53 427.03 T
4 F
(r) 121.9 413.03 T
(eading pointer is not shifted) 126.12 413.03 T
0 F
(. The routine f) 260.8 413.03 T
(ails in case of input language k) 329.33 413.03 T
(e) 477.86 413.03 T
(y w) 483 413.03 T
(ords) 500.55 413.03 T
(lik) 121.9 399.03 T
(e if, else, macro ...) 134.45 399.03 T
2 F
(void skip_word\050char *txt\051;) 107.73 385.03 T
0 F
-0.25 (Lik) 121.9 371.03 P
-0.25 (e test_w) 138.45 371.03 P
-0.25 (ord\050\051, b) 177.74 371.03 P
-0.25 (ut the w) 213.24 371.03 P
-0.25 (ord is skipped when found \050reading pointer is shifted\051. A) 251.28 371.03 P
(syntax error message is generated if the w) 121.9 357.03 T
(ord is not found.) 323.39 357.03 T
2 F
(int scan\050void\051;) 107.73 343.03 T
0 F
(Scan\050\051 reads the ne) 121.9 329.03 T
(xt input tok) 213.35 329.03 T
(en from the input te) 268.58 329.03 T
(xt. Lik) 363.05 329.03 T
(e skip\050\051, it should be) 394.94 329.03 T
(applied carefully \050see there\051.) 121.9 315.03 T
1 16 Q
(10.0  Symbol Manager) 107.73 274.36 T
0 12 Q
(Since re) 107.73 247.03 T
(gistering a ne) 146.54 247.03 T
(w object is done automatically by the parser) 210.89 247.03 T
(, only the search rou-) 422.04 247.03 T
(tine is needed.) 107.73 233.03 T
2 F
(root *find_obj\050char *nam\051;) 107.73 207.03 T
0 F
(The object nam is searched. Nam may contain name e) 121.9 187.03 T
(xtensions \050appended with \324-) 380.99 187.03 T
-0.26 (>\325\051, e.g. input name speci\336cations. These e) 121.9 173.03 P
-0.26 (xtensions are ignored by the routine. The) 326.25 173.03 P
(return v) 121.9 159.03 T
(alue points to the wished object, it is NULL in case the object is unkno) 159.26 159.03 T
(wn.) 499.26 159.03 T
1 16 Q
(11.0  Queues) 107.73 118.36 T
0 12 Q
(In the header \336le \322queue.h\323, data item queues with limited and unlimited capacity are) 107.73 91.03 T
(de\336ned and implemented \050all methods are de\336ned inline\051. The queues are virtually as) 107.73 77.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 24
%%Page: "23" 25
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(23) 516.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(f) 107.73 763.03 T
(ast as programmed \322by hand\323 for FIFO access. Although the classes also pro) 111.6 763.03 T
(vide) 480.35 763.03 T
-0.19 (methods for time-sorted queueing and random access, these functions probably are not) 107.73 749.03 P
-0.35 (as optimal with respect to speed. The class name for the limited queue \050which also may) 107.73 735.03 P
(be switched into an unlimited state\051 is) 107.73 721.03 T
2 F
(queue) 292.72 721.03 T
0 F
(, the unlimited v) 328.72 721.03 T
(ersion is called) 407.21 721.03 T
2 F
(uqueue) 107.73 707.03 T
0 F
(. In the follo) 150.93 707.03 T
(wing, the class methods are described.) 209.96 707.03 T
1 14 Q
(11.1  Initialisation) 107.73 673.7 T
171.39 643.83 107.73 643.83 2 L
V
0.6 H
0 Z
N
0 12 Q
(Class uqueue) 107.73 645.03 T
2 F
(uqueue::uqueue\050void\051;) 107.73 631.03 T
0 F
(Constructor) 121.9 617.03 T
(. Sets current length to zero.) 177.9 617.03 T
165.39 601.83 107.73 601.83 2 L
V
N
(Class queue) 107.73 603.03 T
2 F
(queue::queue\050int mx = 0\051;) 107.73 589.03 T
0 F
(Constructor) 121.9 575.03 T
(. Sets current length to zero, limit to mx. Def) 177.9 575.03 T
(ault mx: 0.) 393.1 575.03 T
(Mx < 0 is cor-) 447.77 575.03 T
(rected to 0 \050use unlimit\050\051 afterw) 121.9 561.03 T
(ards\051.) 274.74 561.03 T
2 F
(int) 107.73 547.03 T
( queue::setmax\050int mx\051;) 129.33 547.03 T
0 F
(Changes the queue limit to mx.) 121.9 533.03 T
(Returns TR) 121.9 519.03 T
(UE:) 177.09 519.03 T
( o.k.) 196.42 519.03 T
(F) 121.9 505.03 T
(ALSE:) 127.68 505.03 T
(current queue length is lar) 164.02 505.03 T
(ger than mx, limit not changed.) 289.11 505.03 T
2 F
(void) 107.73 491.03 T
( queue::unlimit\050void\051;) 136.53 491.03 T
0 F
(Deletes the capacity limitation of a queue. If possible, the class uqueue should be) 121.9 477.03 T
(used instead.) 121.9 463.03 T
1 14 Q
(11.2  Enqueueing) 107.73 429.7 T
171.39 399.83 107.73 399.83 2 L
V
N
0 12 Q
(Class uqueue) 107.73 401.03 T
2 F
(void) 107.73 387.03 T
( uqueue::enqueue\050data *pd\051;) 136.53 387.03 T
0 F
(Enqueues the gi) 121.9 373.03 T
(v) 198.26 373.03 T
(en item at the tail of the queue.) 204.08 373.03 T
2 F
(void) 107.73 359.03 T
( uqueue::enqHead\050data *pd\051;) 136.53 359.03 T
0 F
(Enqueues the gi) 121.9 345.03 T
(v) 198.26 345.03 T
(en item at the head of the queue.) 204.08 345.03 T
2 F
(void) 107.73 331.03 T
( uqueue::enqTime\050data *pd\051;) 136.53 331.03 T
0 F
(Enques the item in front of the \336rst item with a time member not smaller than pd-) 121.9 317.03 T
(>time \050creates a sorted queue with increasing time stamps\051. If) 121.9 303.03 T
(pd->time is lar) 420.94 303.03 T
(ger) 491.49 303.03 T
(than all other times, pd is added at the tail.) 121.9 289.03 T
2 F
(int) 107.73 275.03 T
( uqueue::enqPrec\050data *pd, data *ref\051;) 129.33 275.03 T
0 F
(Looks for ref and enqueues pd in front of ref.) 121.9 261.03 T
(Returns TR) 121.9 247.03 T
(UE:) 177.09 247.03 T
(o.k.) 199.42 247.03 T
(F) 121.9 233.03 T
(ALSE:) 127.68 233.03 T
(ref not found in the queue) 164.02 233.03 T
2 F
(int) 107.73 219.03 T
( uqueue::enqSuc\050data *pd, data *ref\051;) 129.33 219.03 T
0 F
(Looks for ref and enqueues *pd behind *ref.) 121.9 205.03 T
(Returns TR) 121.9 191.03 T
(UE:) 177.09 191.03 T
( o.k.) 196.42 191.03 T
(F) 121.9 177.03 T
(ALSE:) 127.68 177.03 T
(ref not found in the queue) 164.02 177.03 T
165.39 161.83 107.73 161.83 2 L
V
N
(Class queue) 107.73 163.03 T
-0.3 (All uqueue methods are also a) 107.73 149.03 P
-0.3 (v) 250.96 149.03 P
-0.3 (ailable for queue. The) 256.66 149.03 P
-0.3 (y \336rst check on o) 360.88 149.03 P
-0.3 (v) 442.15 149.03 P
-0.3 (er\337o) 447.97 149.03 P
-0.3 (w and then) 469.67 149.03 P
(call uqueue\325) 107.73 135.03 T
(s method. All methods return int:) 166.05 135.03 T
(F) 119.73 121.03 T
(ALSE  on o) 125.51 121.03 T
(v) 182.33 121.03 T
(er\337o) 188.15 121.03 T
(w or unsuccesssfull uqueue method,) 209.85 121.03 T
(   TR) 107.73 107.03 T
(UE) 131.58 107.03 T
(otherwise.) 150.58 107.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 25
%%Page: "24" 26
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(24) 516.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(11.3  Dequeueing) 107.73 761.7 T
233.37 731.83 107.73 731.83 2 L
V
0.6 H
0 Z
N
0 12 Q
(Classes uqueue and queue) 107.73 733.03 T
2 F
(data) 107.73 719.03 T
( *\050u\051queue::dequeue\050void\051;) 136.53 719.03 T
0 F
(Dequeues and returns the item at the front. An empty queue returns NULL.) 121.9 705.03 T
2 F
(data) 107.73 691.03 T
( *\050u\051queue::deqTail\050void\051;) 136.53 691.03 T
0 F
(Dequeues and returns the item at the tail. An empty queue returns NULL.) 121.9 677.03 T
2 F
(data) 107.73 663.03 T
( *\050u\051queue::deqTime\050tim_typ tim\051;) 136.53 663.03 T
0 F
(Dequeues and returns the \336rst item with a time member not smaller than tim.) 121.9 649.03 T
(Returns NULL if no appropriate item found.) 121.9 635.03 T
2 F
(data) 107.73 621.03 T
( *\050u\051queue::deqThis\050data *pd\051;) 136.53 621.03 T
0 F
(Dequeues the speci\336ed item. Returns pd if found in the queue, otherwise NULL.) 121.9 607.03 T
1 14 Q
(11.4  Inf) 107.73 573.7 T
(ormation) 156.77 573.7 T
233.37 543.83 107.73 543.83 2 L
V
N
0 12 Q
(Classes uqueue and queue) 107.73 545.03 T
2 F
(int) 107.73 531.03 T
( \050u\051queue::isEmpty\050void\051;) 129.33 531.03 T
0 F
(Returns TR) 121.9 517.03 T
(UE if queue is empty) 177.09 517.03 T
(, F) 278.3 517.03 T
(ALSE otherwise.) 290.08 517.03 T
2 F
(int) 107.73 503.03 T
( \050u\051queue::isQueued\050data *pd\051;) 129.33 503.03 T
0 F
(Returns TR) 121.9 489.03 T
(UE if *pd is queued, F) 177.09 489.03 T
(ALSE otherwise.) 284.86 489.03 T
2 F
(int) 107.73 475.03 T
( \050u\051queue::getlen\050void\051;) 129.33 475.03 T
0 F
(Returns the current queue length.) 121.9 461.03 T
2 F
(data) 107.73 447.03 T
( *\050u\051queue::first\050void\051;) 136.53 447.03 T
0 F
-0.03 (Returns the item which w) 121.9 433.03 P
-0.03 (ould be returned by \050u\051queue::deq\050\051, b) 244.98 433.03 P
-0.03 (ut does not actually) 427.88 433.03 P
(dequeue it. Returns NULL in case the queue w) 121.9 419.03 T
(as empty) 346.73 419.03 T
(.) 388.95 419.03 T
2 F
(data) 107.73 405.03 T
( *\050u\051queue::last\050void\051;) 136.53 405.03 T
0 F
(Returns the last item of the queue. It is not dequeued. Returns NULL if the queue) 121.9 391.03 T
(w) 121.9 377.03 T
(as empty) 130.44 377.03 T
(.) 172.66 377.03 T
2 F
(data) 107.73 363.03 T
( *\050u\051queue::sucOf\050data *pd\051;) 136.53 363.03 T
0 F
(Returns the item behind the speci\336ed one. Returns NULL if pd not) 121.9 349.03 T
(found or pd is) 445.54 349.03 T
(the last item of the queue.) 121.9 335.03 T
2 F
(data) 107.73 321.03 T
( *\050u\051queue::precOf\050data *pd\051;) 136.53 321.03 T
0 F
-0.4 (Returns the item in front of the speci\336ed one. Returns NULL if pd not found or pd is) 121.9 307.03 P
(the \336rst item of the queue.) 121.9 293.03 T
165.39 277.83 107.73 277.83 2 L
V
N
(Class queue) 107.73 279.03 T
2 F
(int) 107.73 265.03 T
( queue::isFull\050void\051;) 129.33 265.03 T
0 F
(Returns TR) 121.9 251.03 T
(UE if queue is full, F) 177.09 251.03 T
(ALSE otherwise.) 277.53 251.03 T
2 F
(int) 107.73 237.03 T
(queue::getmax\050void\051;) 136.53 237.03 T
0 F
(Returns the current queue limit. In case unlimit\050\051 w) 121.9 223.03 T
(as called in adv) 368.08 223.03 T
(ance, -1 is) 442.1 223.03 T
(returned.) 121.9 209.03 T
1 14 Q
(11.5  W) 107.73 175.7 T
(alk thr) 152.32 175.7 T
(ough a Queue) 192.9 175.7 T
2 12 Q
(int \050u\051queue::resCursor\050\051;) 107.73 149.03 T
0 F
(Initializes the internal cursor for subsequent calls of getNe) 121.9 135.03 T
(xt\050\051. Returns TR) 402.33 135.03 T
(UE on) 480.84 135.03 T
(success, F) 121.9 121.03 T
(ALSE otherwise \050queue empty\051.) 169.67 121.03 T
2 F
(data *\050u\051queue::getNext\050\051;) 107.73 107.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 26
%%Page: "25" 27
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(25) 516.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
-0.45 (Each call returns the pointer to the ne) 121.9 763.03 P
-0.45 (xt data object queued. Returns NULL, if end of) 298.19 763.03 P
(queue reached. The \336rst call returns the front of the queue.) 121.9 749.03 T
-0.17 (Prior to the \336rst call of getNe) 121.9 735.03 P
-0.17 (xt\050\051, resCursor\050\051 has to be called. If resCursor\050\051 w) 261.36 735.03 P
-0.17 (asn\325) 498.48 735.03 P
-0.17 (t) 518.25 735.03 P
(successful, getNe) 121.9 721.03 T
(xt\050\051 must not be called. Between resCursor\050\051 and all subsequent) 205.7 721.03 T
(calls of getNe) 121.9 707.03 T
(xt\050\051, no enqueueing or dequeueing actions are allo) 188.37 707.03 T
(wed.) 428.68 707.03 T
150.39 691.83 107.73 691.83 2 L
V
0.6 H
0 Z
N
(Example) 107.73 693.03 T
2 F
(if \050q.resCursor\050\051\051) 107.73 679.03 T
({) 107.73 665.03 T
(data) 141.74 665.03 T
(*p;) 170.54 665.03 T
(while \050\050p = q.getNext\050\051\051 != NULL\051) 141.74 651.03 T
({) 141.74 637.03 T
(// do sth with p) 170.09 637.03 T
(}) 141.74 623.03 T
(}) 107.73 609.03 T
(else) 107.73 595.03 T
(// queue empty.) 141.74 595.03 T
1 16 Q
(12.0  Random Numbers) 107.73 554.36 T
0 12 Q
(The random nuber generator has been inte) 107.73 527.03 T
(grated into the system to be independent of) 310.15 527.03 T
(dif) 107.73 513.03 T
(ferent implementations on dif) 120.76 513.03 T
(ferent platforms. The implemented generator is, ho) 262.78 513.03 T
(w-) 507.1 513.03 T
(e) 107.73 499.03 T
(v) 112.75 499.03 T
(er) 118.57 499.03 T
(, the simplest one which is kno) 127.42 499.03 T
(wn to be not v) 275.45 499.03 T
(ery good. Y) 343.93 499.03 T
(ou can choose the ran-) 399.6 499.03 T
(dom\050\051 routine from Berkle) 107.73 485.03 T
(y by editing the header \336le \322defs.h\323. Uncomment the line) 235.19 485.03 T
(de\336ning the preprocessor v) 107.73 471.03 T
(ariable USE_MY_RAND. An) 237.74 471.03 T
(yw) 381.87 471.03 T
(ay) 396.41 471.03 T
(, it is recommended to) 406.96 471.03 T
(use al) 107.73 457.03 T
(w) 135.27 457.03 T
(ays the name my_rand\050\051 when asking for a random number) 143.81 457.03 T
(. The routine actu-) 427.42 457.03 T
(ally used then can be determined by an inline function in \322defs.h\323.) 107.73 443.03 T
-0.41 (F) 107.73 417.03 P
-0.41 (or the generation of random numbers distrib) 114.22 417.03 P
-0.41 (uted non-uniformly) 323.48 417.03 P
-0.41 (, a table-based v) 415.94 417.03 P
-0.41 (ersion) 492.5 417.03 P
(has been chosen. Besides the netw) 107.73 403.03 T
(ork object class Distrib) 272.91 403.03 T
(ution \050see User\325) 383.65 403.03 T
(s manual\051) 459.64 403.03 T
-0.2 (which can generate transformation tables for arbitrary distrib) 107.73 389.03 P
-0.2 (utions, a modul pro) 398.38 389.03 P
-0.2 (viding) 490.94 389.03 P
-0.2 (transformation tables for geometrical distrib) 107.73 375.03 P
-0.2 (utions has been implemented. A user need-) 318.65 375.03 P
(ing r) 107.73 361.03 T
(.n.s re) 129.4 361.03 T
(gisters with) 158.21 361.03 T
2 F
(int get_geo1_handler\050double expectation\051;) 107.73 341.03 T
0 F
(The returned k) 121.9 327.03 T
(e) 192.42 327.03 T
(y v) 197.57 327.03 T
(alue is used lateron to obtain a r) 212.27 327.03 T
(.n.:) 364.59 327.03 T
2 F
(int geo1_rand\050key\051;) 107.73 313.03 T
0 F
(It is also possible to ask for the transformation table \050length: RAND_MODULO\051) 121.9 299.03 T
(itself:) 121.9 285.03 T
2 F
(tim_typ *get_geo1_table\050int key\051;) 107.73 271.03 T
0 F
-0.08 (K) 121.9 257.03 P
-0.08 (e) 130.26 257.03 P
-0.08 (y ag) 135.41 257.03 P
-0.08 (ain is the v) 155.6 257.03 P
-0.08 (alue returned by get_geo1_handler\050\051. F) 207.39 257.03 P
-0.08 (or applications see e.g. the) 394.51 257.03 P
(object class GMDPquelle.) 121.9 243.03 T
1 16 Q
(13.0  Err) 107.73 202.36 T
(or Messages) 168.32 202.36 T
0 12 Q
-0.26 (There are tw) 107.73 175.03 P
-0.26 (o f) 167.72 175.03 P
-0.26 (amilies of error message routines. Both pass dif) 180.33 175.03 P
-0.26 (ferent numbers of string) 406.83 175.03 P
(and inte) 107.73 161.03 T
(ger ar) 145.88 161.03 T
(guments to an embedded fprintf\050stderr) 173.31 161.03 T
(, ...\051 call. T) 357.46 161.03 T
(o obtain an o) 409.15 161.03 T
(v) 471.3 161.03 T
(ervie) 477.12 161.03 T
(w) 500.81 161.03 T
(which error messages are a) 107.73 147.03 T
(v) 237.43 147.03 T
(ailable, tak) 243.13 147.03 T
(e a look at src/k) 295.67 147.03 T
(ernel/all.c.) 371.53 147.03 T
353.03 125.83 107.73 125.83 2 L
V
N
(Syntax error messages \050with relation to the input te) 107.73 127.03 T
369.52 125.83 352.85 125.83 2 L
V
N
(xt\051:) 352.85 127.03 T
2 F
(void syntax_XX\050...\051;) 107.73 113.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 27
%%Page: "26" 28
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
107.73 53.87 524.42 53.87 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 8 Q
(Y) 202.14 42.86 T
(A) 206.96 42.86 T
(TS \320 Y) 211.84 42.86 T
(et Another T) 234.16 42.86 T
(in) 274.76 42.86 T
(y Simulator: Programmer\325) 280.86 42.86 T
(s Manual for V) 364.86 42.86 T
(ersion 0.3) 412.63 42.86 T
(26) 516.42 42.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
(According to the current position of the input te) 121.9 763.03 T
(xt reading pointer) 351.03 763.03 T
(, the current input) 435.87 763.03 T
-0.41 (te) 121.9 749.03 P
-0.41 (xt line, the line number) 130.38 749.03 P
-0.41 (, the \336le name and a sign pointing to the current input tok) 239.92 749.03 P
-0.41 (en) 510.5 749.03 P
(are written to stderr) 121.9 735.03 T
(. The embedded error message is printed, Y) 215.55 735.03 T
(A) 423.72 735.03 T
(TS is left with e) 431.06 735.03 T
(xit) 507.54 735.03 T
(status 1.) 121.9 721.03 T
290.04 705.83 107.73 705.83 2 L
V
0.6 H
0 Z
N
(Plain error messages \050without input te) 107.73 707.03 T
342.86 705.83 289.86 705.83 2 L
V
N
(xt relation\051) 289.86 707.03 T
2 F
(void errm_XX\050...\051;) 107.73 693.03 T
0 F
(Lik) 121.9 679.03 T
(e syntax_XX\050\051, b) 138.45 679.03 T
(ut no information related to the input te) 221.19 679.03 T
(xt is gi) 410 679.03 T
(v) 442.37 679.03 T
(en.) 448.19 679.03 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 28
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 28
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Courier
%%+ Courier-Bold
%%+ Times-Italic
%%EOF
